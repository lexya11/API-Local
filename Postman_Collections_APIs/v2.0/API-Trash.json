{
	"info": {
		"_postman_id": "470fd02a-63b5-4972-9533-e5f9bac56feb",
		"name": "API-Trash v2.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "RUN ALL SCRIPTS API - TRASH",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e1b744bb-acc2-4081-aac1-a4f8c9a6cfbb",
						"exec": [
							"var email_U1 = pm.environment.get(\"email_U1\");",
							"var email = pm.environment.get(\"email\");",
							"if(email_U1 === undefined){",
							"    pm.environment.set(\"email\",email);",
							"    pm.environment.set(\"password\",pm.environment.get(\"password\"));",
							"}else{",
							"    pm.environment.set(\"email\",email_U1);",
							"    pm.environment.set(\"password\",pm.environment.get(\"password_U1\"));",
							"}",
							"// Use the CryptoJS",
							"var hash = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\")+\":LeftCoastLogic:\"+pm.environment.get(\"password\"))+pm.environment.get(\"appreg\")).toString();",
							"",
							"console.log(\"sig: \" + hash);",
							"postman.setEnvironmentVariable(\"sig\", hash);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "64ab487d-2eda-44c8-b027-39943e652ed9",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"",
							"var keyapi = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\") + pm.environment.get(\"appreg\")) + json.tokenapi).toString();",
							"",
							"postman.setEnvironmentVariable(\"token\", json.tokenapi);",
							"postman.setEnvironmentVariable(\"keyapi\", keyapi);",
							"",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Test Version: '+pm.environment.get('version')+'\\nFailed - Pretest - Login',",
							"    endpoint: pm.environment.get('version')+\"/users/token.json\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Test Version: '+pm.environment.get('version')+'\\nPassed - Pretest - Login',",
							"    endpoint: pm.environment.get('version')+\"/users/token.json\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"var statusResponse = responseCode.code;",
							"var msg ;",
							"if(statusResponse == 200){",
							"    ",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    var body = json.description;",
							"    if(body==\"Flo\"){",
							"        msg.description=body;",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Description response failed\";",
							"        msg.description=body;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\"",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"email\": \"{{email}}\",\n\t\"alias\": \"{{alias}}\",\n\t\"sig\": \"{{sig}}\"\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/users/token.json",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"users",
						"token.json"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Trash - Create with none obj_id in body",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ace244c1-55da-4d18-a017-9e5872dcef53",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Create Trash - Create with none obj_id in body',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Create Trash - Create with none obj_id in body',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg ;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = statusResponse;",
							"    if(!dataResponse.includes(\"error\")){",
							"        msg.description=\"Allow to create new item trashed with none parameter obj_id in body\";",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.description = dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"trashs\":\n    [\n        {   \n            \"obj_type\":\"VTODO\",\n            \"status\":1,\n            \"sync_token\":0,\n            \"trash_time\":1,\n            \"ref\":1\n        }\n    ]\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Trash - Create with none obj_type in body",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d2211269-97b5-4a26-b854-ad10bf8a00fb",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Create Trash - Create with none obj_type in body',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Create Trash - Create with none obj_type in body',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg ;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = statusResponse;",
							"    if(dataResponse.includes(\"error\")){",
							"        msg.description=json.data_error[0].description;",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.description = dataResponse;",
							"        msg.error = \"Allow to create new item trashed with none parameter obj_type in body\";",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"trashs\":\n    [\n        {\n        \t\"obj_id\":\"12abc\",\n            \"status\":1,\n            \"sync_token\":0,\n            \"trash_time\":1,\n            \"ref\":1\n        }\n    ]\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Trash - Create with null obj_id in body",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "93df6819-1589-4f72-9468-6556e194b118",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Create Trash - Create with null obj_id in body',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Create Trash - Create with null obj_id in body',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg ;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = statusResponse;",
							"    if(!dataResponse.includes(\"error\")){",
							"        msg.description=\"Allow to create new item trashed with null parameter obj_id in body\";",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.description = dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"trashs\":\n    [\n        {\n        \t\"obj_id\":null,\n            \"obj_type\":\"VTODO\",\n            \"status\":1,\n            \"sync_token\":0,\n            \"trash_time\":1,\n            \"ref\":1\n        }\n    ]\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Trash - Create with null obj_type in body",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f302ea7b-68cc-4fe6-a8c3-0e34c0b0e0ce",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Create Trash - Create with null obj_type in body',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Create Trash - Create with null obj_type in body',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg ;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = statusResponse;",
							"    if(dataResponse.includes(\"error\")){",
							"        msg.description=json.data_error[0].description;",
							"",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.description = dataResponse;",
							"        msg.error = \"Allow to create new item trashed with null parameter obj_type in body\";",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"trashs\":\n    [\n        {\n        \t\"obj_id\":\"123a\",\n            \"obj_type\":null,\n            \"status\":1,\n            \"sync_token\":0,\n            \"trash_time\":1,\n            \"ref\":1\n        }\n    ]\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Trash - Create with obj_type = EMAIL",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "22c37669-f9d0-42d7-a956-b71220741416",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Create Trash - Create with obj_type = EMAIL',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Create Trash - Create with obj_type = EMAIL',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg ;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = statusResponse;",
							"    if(dataResponse.includes(\"trash\") && json.data[0].trash.obj_type == \"EMAIL\"){",
							"        msg.description = \"Create with obj_type = EMAIL successful.\"",
							"        pm.environment.set(\"idEmail\",json.data[0].trash.id)",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.description = dataResponse;",
							"        msg.error = \"Create new item trashed with object type is not EMAIL.\";",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"trashs\":\n    [\n        {\n        \t\"obj_id\":\"email-1\",\n            \"obj_type\":\"EMAIL\",\n            \"status\":1,\n            \"sync_token\":0,\n            \"trash_time\":1,\n            \"ref\":1\n        }\n    ]\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Trash - Create with obj_type = CANVAS",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "41134a91-6b04-47ca-9283-bea96d06ea72",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Create Trash - Create with obj_type = CANVAS',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Create Trash - Create with obj_type = CANVAS',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg ;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = statusResponse;",
							"    if(dataResponse.includes(\"trash\") && json.data[0].trash.obj_type == \"CANVAS\"){",
							"        msg.description = \"Create with obj_type = CANVAS successful.\"",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.description = dataResponse;",
							"        msg.error = \"Create new item trashed with object type is not CANVAS.\";",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"trashs\":\n    [\n        {\n        \t\"obj_id\":\"canvas-1\",\n            \"obj_type\":\"CANVAS\",\n            \"status\":1,\n            \"sync_token\":0,\n            \"trash_time\":1,\n            \"ref\":1\n        }\n    ]\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Trash - Create with obj_type = HISTORY",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f7068914-5643-4ed8-a8df-488ea2b3a3db",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Create Trash - Create with obj_type = HISTORY',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Create Trash - Create with obj_type = HISTORY',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg ;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = statusResponse;",
							"    if(dataResponse.includes(\"trash\") && json.data[0].trash.obj_type == \"HISTORY\"){",
							"        msg.description = \"Create with obj_type = HISTORY successful.\"",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.description = dataResponse;",
							"        msg.error = \"Create new item trashed with object type is not HISTORY.\";",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"trashs\":\n    [\n        {\n        \t\"obj_id\":\"history-1\",\n            \"obj_type\":\"HISTORY\",\n            \"status\":1,\n            \"sync_token\":0,\n            \"trash_time\":1,\n            \"ref\":1\n        }\n    ]\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Trash - Create with obj_type = VCARD",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d94b7d62-87cc-4cca-a93d-cd27bb73ce7a",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Create Trash - Create with obj_type = VCARD',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Create Trash - Create with obj_type = VCARD',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg ;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = statusResponse;",
							"    if(dataResponse.includes(\"trash\") && json.data[0].trash.obj_type == \"VCARD\"){",
							"        msg.description = \"Create with obj_type = VCARD successful.\"",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.description = dataResponse;",
							"        msg.error = \"Create new item trashed with object type is not VCARD.\";",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"trashs\":\n    [\n        {\n        \t\"obj_id\":\"0AFD229E-1F91-4913-87C5-2BA8602D8F48\",\n            \"obj_type\":\"VCARD\",\n            \"status\":1,\n            \"sync_token\":0,\n            \"trash_time\":1554455333.5669641,\n            \"ref\":6\n        }\n    ]\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Trash - Create with obj_type = SUGGESTED_COLLECTION",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d61b8920-4d55-4ebd-935a-714bea301656",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Create Trash - Create with obj_type = SUGGESTED_COLLECTION',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Create Trash - Create with obj_type = SUGGESTED_COLLECTION',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg ;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = statusResponse;",
							"    if(dataResponse.includes(\"trash\") && json.data[0].trash.obj_type == \"SUGGESTED_COLLECTION\"){",
							"        msg.description = \"Create with obj_type = SUGGESTED_COLLECTION successful.\"",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.description = dataResponse;",
							"        msg.error = \"Create new item trashed with object type is not SUGGESTED_COLLECTION.\";",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"trashs\":\n    [\n        {\n        \t\"obj_id\":\"suggested_collection-1\",\n            \"obj_type\":\"SUGGESTED_COLLECTION\",\n            \"status\":1,\n            \"sync_token\":0,\n            \"trash_time\":1,\n            \"ref\":1\n        }\n    ]\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Trash - Create with obj_type = CSFILE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "307f0ffe-45b0-47eb-aeea-b7c3b5740b13",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Create Trash - Create with obj_type = CSFILE',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Create Trash - Create with obj_type = CSFILE',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg ;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = statusResponse;",
							"    if(dataResponse.includes(\"trash\") && json.data[0].trash.obj_type == \"CSFILE\"){",
							"        msg.description = \"Create with obj_type = CSFILE successful.\"",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.description = dataResponse;",
							"        msg.error = \"Create new item trashed with object type is not CSFILE.\";",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"trashs\":\n    [\n        {\n        \t\"obj_id\":\"csFile-1\",\n            \"obj_type\":\"CSFILE\",\n            \"status\":1,\n            \"sync_token\":0,\n            \"trash_time\":1,\n            \"ref\":1\n        }\n    ]\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Trash - Create with obj_type = ORDER_OBJ",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8c64fe30-b57a-4cfa-9652-5779918bff44",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Create Trash - Create with obj_type = ORDER_OBJ',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Create Trash - Create with obj_type = ORDER_OBJ',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg ;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = statusResponse;",
							"    if(dataResponse.includes(\"trash\") && json.data[0].trash.obj_type == \"ORDER_OBJ\"){",
							"        msg.description = \"Create with obj_type = ORDER_OBJ successful.\"",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.description = dataResponse;",
							"        msg.error = \"Create new item trashed with object type is not ORDER_OBJ.\";",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"trashs\":\n    [\n        {\n        \t\"obj_id\":\"order-object-1\",\n            \"obj_type\":\"ORDER_OBJ\",\n            \"status\":1,\n            \"sync_token\":0,\n            \"trash_time\":1,\n            \"ref\":1\n        }\n    ]\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Trash - Create with obj_type = SET_3RD_ACC",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "66ae4598-ed9a-4ce0-98c5-15645b94c411",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Create Trash - Create with obj_type = SET_3RD_ACC',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Create Trash - Create with obj_type = SET_3RD_ACC',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg ;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = statusResponse;",
							"    if(dataResponse.includes(\"trash\") && json.data[0].trash.obj_type == \"SET_3RD_ACC\"){",
							"        msg.description = \"Create with obj_type = SET_3RD_ACC successful.\"",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.description = dataResponse;",
							"        msg.error = \"Create new item trashed with object type is not SET_3RD_ACC.\";",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"trashs\":\n    [\n        {\n        \t\"obj_id\":\"set-3rd-account\",\n            \"obj_type\":\"SET_3RD_ACC\",\n            \"status\":1,\n            \"sync_token\":0,\n            \"trash_time\":1,\n            \"ref\":1\n        }\n    ]\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Trash - Create with obj_type = VEVENT",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a37c6eba-9a49-446f-aa16-0cc769fbf710",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Create Trash - Create with obj_type = VEVENT',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Create Trash - Create with obj_type = VEVENT',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg ;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = statusResponse;",
							"    if(dataResponse.includes(\"trash\") && json.data[0].trash.obj_type == \"VEVENT\"){",
							"        msg.description = \"Create with obj_type = VEVENT successful.\"",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.description = dataResponse;",
							"        msg.error = \"Create new item trashed with object type is not VEVENT.\";",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"trashs\":[\n\t\t{\n\t\t\t\"obj_type\":\"VEVENT\",\n\t\t\t\"id\":\"\",\n\t\t\t\"obj_id\":\"A4729386-32A3-4EF2-887B-3E1C60575F55\",\n\t\t\t\"trash_time\":1554455310.292959,\n\t\t\t\"ref\":2\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Trash - Create with obj_type = VTODO",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a37c6eba-9a49-446f-aa16-0cc769fbf710",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Create Trash - Create with obj_type = VTODO',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Create Trash - Create with obj_type = VTODO',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg ;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = statusResponse;",
							"    if(dataResponse.includes(\"trash\") && json.data[0].trash.obj_type == \"VTODO\"){",
							"        msg.description = \"Create with obj_type = VTODO successful.\"",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.description = dataResponse;",
							"        msg.error = \"Create new item trashed with object type is not VTODO.\";",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"trashs\":[\n\t\t{\n\t\t\t\"obj_type\":\"VTODO\",\n\t\t\t\"id\":\"\",\n\t\t\t\"obj_id\":\"A81B9148-8874-4380-B197-96F9E938EE19\",\n\t\t\t\"trash_time\":1554455327.8329921,\n\t\t\t\"ref\":4\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Trash - Create with obj_type = VJOURNAL",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0b2660ca-f5d7-4cd9-83bd-24711e8eb8e4",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Create Trash - Create with obj_type = VJOURNAL',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Create Trash - Create with obj_type = VJOURNAL',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg ;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = statusResponse;",
							"    if(dataResponse.includes(\"trash\") && json.data[0].trash.obj_type == \"VJOURNAL\"){",
							"        msg.description = \"Create with obj_type = VJOURNAL successful.\"",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.description = dataResponse;",
							"        msg.error = \"Create new item trashed with object type is not VJOURNAL.\";",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"trashs\":\n    [\n        {\n        \t\"obj_id\":\"241a52a7-d7c5-4e94-adf3-ffe90da0766a\",\n            \"obj_type\":\"VJOURNAL\",\n            \"status\":1,\n            \"sync_token\":0,\n            \"trash_time\":1554455333.5669641,\n            \"ref\":8\n        }\n    ]\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Trash - Create with obj_type = VCALENDAR",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "903b193e-03dd-4ffc-88fb-36d2647f9312",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Create Trash - Create with obj_type = VCALENDAR',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Create Trash - Create with obj_type = VCALENDAR',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg ;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = statusResponse;",
							"    if(dataResponse.includes(\"trash\") && json.data[0].trash.obj_type == \"VCALENDAR\"){",
							"        msg.description = \"Create with obj_type = VCALENDAR successful.\"",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.description = dataResponse;",
							"        msg.error = \"Create new item trashed with object type is not VCALENDAR.\";",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"trashs\":\n    [\n        {\n        \t\"obj_id\":\"Vcalendar-1\",         \n            \"obj_type\":\"VCALENDAR\",\n            \"status\":1,\n            \"sync_token\":0,\n            \"trash_time\":1,\n            \"ref\":1\n        }\n    ]\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Trash - Create with obj_type = FOLDER",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e7ef152b-bcd5-4b02-804f-982de86d761c",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Create Trash - Create with obj_type = FOLDER',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Create Trash - Create with obj_type = FOLDER',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg ;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = statusResponse;",
							"    if(dataResponse.includes(\"trash\") && json.data[0].trash.obj_type == \"FOLDER\"){",
							"        msg.description = \"Create with obj_type = FOLDER successful.\"",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.description = dataResponse;",
							"        msg.error = \"Create new item trashed with object type is not FOLDER.\";",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"trashs\":\n    [\n        {\n        \t\"obj_id\":\"80094\",         \n            \"obj_type\":\"FOLDER\",\n            \"status\":1,\n            \"sync_token\":0,\n            \"trash_time\":1554455385.1215491,\n            \"ref\":14\n        }\n    ]\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Trash - Create with obj_type = LINK",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "66dc3431-96e7-4a24-b195-ece5b9a150fb",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Create Trash - Create with obj_type = LINK',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Create Trash - Create with obj_type = LINK',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg ;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = statusResponse;",
							"    if(dataResponse.includes(\"trash\") && json.data[0].trash.obj_type == \"LINK\"){",
							"        msg.description = \"Create with obj_type = LINK successful.\"",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.description = dataResponse;",
							"        msg.error = \"Create new item trashed with object type is not LINK.\";",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"trashs\":\n    [\n        {\n        \t\"obj_id\":\"link-1\",         \n            \"obj_type\":\"LINK\",\n            \"status\":1,\n            \"sync_token\":0,\n            \"trash_time\":1,\n            \"ref\":1\n        }\n    ]\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Trash - Create with obj_type = URL",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ba12ef5a-a5a0-4f23-ac51-4c638564aced",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Create Trash - Create with obj_type = URL',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Create Trash - Create with obj_type = URL',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg ;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = statusResponse;",
							"    if(dataResponse.includes(\"trash\") && json.data[0].trash.obj_type == \"URL\"){",
							"        msg.description = \"Create with obj_type = URL successful.\"",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.description = dataResponse;",
							"        msg.error = \"Create new item trashed with object type is not URL.\";",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"trashs\":\n    [\n        {\n        \t\"obj_id\":\"1037925\",         \n            \"obj_type\":\"URL\",\n            \"status\":1,\n            \"sync_token\":0,\n            \"trash_time\":1554455343.989552,\n            \"ref\":10\n        }\n    ]\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Trash - Create with obj_type = TRACK",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fc6070f6-910a-46e9-834d-142dfa1f441a",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Create Trash - Create with obj_type = TRACK',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Create Trash - Create with obj_type = TRACK',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg ;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = statusResponse;",
							"    if(dataResponse.includes(\"trash\") && json.data[0].trash.obj_type == \"TRACK\"){",
							"        msg.description = \"Create with obj_type = TRACK successful.\"",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.description = dataResponse;",
							"        msg.error = \"Create new item trashed with object type is not TRACK.\";",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"trashs\":\n    [\n        {\n        \t\"obj_id\":\"track-1\",         \n            \"obj_type\":\"TRACK\",\n            \"status\":1,\n            \"sync_token\":0,\n            \"trash_time\":1,\n            \"ref\":1\n        }\n    ]\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Trash - Create with obj_type = FILE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c9a1a2aa-47cf-4b39-b060-f4d099a49b5b",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Create Trash - Create with obj_type = FILE',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Create Trash - Create with obj_type = FILE',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg ;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = statusResponse;",
							"    if(dataResponse.includes(\"trash\") && json.data[0].trash.obj_type == \"FILE\"){",
							"        msg.description = \"Create with obj_type = FILE successful.\"",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.description = dataResponse;",
							"        msg.error = \"Create new item trashed with object type is not FILE.\";",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"trashs\":\n    [\n        {\n        \t\"obj_id\":\"99749\",         \n            \"obj_type\":\"FILE\",\n            \"status\":1,\n            \"sync_token\":0,\n            \"trash_time\":1554455349.224787,\n            \"ref\":12\n        }\n    ]\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Trash - Create with obj_type = TRASH",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "afa8daf6-e676-442f-82f7-d732c9c43f25",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Create Trash - Create with obj_type = TRASH',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Create Trash - Create with obj_type = TRASH',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg ;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = statusResponse;",
							"    if(dataResponse.includes(\"trash\") && json.data[0].trash.obj_type == \"TRASH\"){",
							"        msg.description = \"Create with obj_type = TRASH successful.\"",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.description = dataResponse;",
							"        msg.error = \"Create new item trashed with object type is not TRASH.\";",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"trashs\":\n    [\n        {\n        \t\"obj_id\":\"trash-1\",         \n            \"obj_type\":\"TRASH\",\n            \"status\":1,\n            \"sync_token\":0,\n            \"trash_time\":1,\n            \"ref\":1\n        }\n    ]\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Trash - Create with obj_type = KANBAN",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "05a37179-91b1-4a5c-a438-86c953a52446",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Create Trash - Create with obj_type = KANBAN',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Create Trash - Create with obj_type = KANBAN',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg ;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = statusResponse;",
							"    if(dataResponse.includes(\"trash\") && json.data[0].trash.obj_type == \"KANBAN\"){",
							"        msg.description = \"Create with obj_type = KANBAN successful.\"",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.description = dataResponse;",
							"        msg.error = \"Create new item trashed with object type is not KANBAN.\";",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"trashs\":\n    [\n        {\n        \t\"obj_id\":\"Kanban-1\",         \n            \"obj_type\":\"KANBAN\",\n            \"status\":1,\n            \"sync_token\":0,\n            \"trash_time\":1,\n            \"ref\":1\n        }\n    ]\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Trash - Create trash item with invalid value inputted",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "05a37179-91b1-4a5c-a438-86c953a52446",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Create Trash - Create trash item with invalid value inputted',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Create Trash - Create trash item with invalid value inputted',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg ;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = statusResponse;",
							"    if(dataResponse.includes(\"data_error\")){",
							"        msg.description = dataResponse;",
							"        msg.error = \"Cannot create trash item with invalid value inputted\";",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.description = dataResponse;",
							"        msg.error = \"Allow to create trash item with invalid value inputted\";",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"trashs\":\n    [\n        {\n        \t\"obj_id\":\"Kanban-1\",         \n            \"obj_type\":\"12automationqcflo@gmail.automationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comm\",\n            \"status\":1,\n            \"sync_token\":0,\n            \"trash_time\":1,\n            \"ref\":1\n        }\n    ]\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Trash - Create  over 50 items trashed",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5a8b375e-00c5-46ab-bed6-f0d4df121c60",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Create Trash - Create  over 50 items trashed',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Create Trash - Create  over 50 items trashed',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg ;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = statusResponse;",
							"    if(dataResponse.includes(\"error\")){",
							"        msg.description = \"Response data not allow to create over 50 Items successful\";",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Not response data error\\nBug: https://floware.atlassian.net/browse/FB-117\"",
							"        msg.description=\"Not response data error\";",
							"    }",
							"",
							"    if(dataResponse.includes(\"data\")){",
							"        var count = json.data.length;",
							"        var array =[];",
							"            for(var i =0; i<count;i++){",
							"            array[i]=json.data[i].trash.id;",
							"        }",
							"        pm.environment.set(\"over50items\",array);",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "2af82208-2f2d-4102-ac40-5d7d7224cc8c",
						"exec": [
							"var stringJson = \"\";",
							"for(var i = 0; i< 51; i++){",
							"    var id_trashed = \"item trashed - \"+i;",
							"    pm.environment.set(\"id-\"+i,id_trashed)",
							"    stringJson = (stringJson === \"\" ? stringJson : stringJson+', ')+'{ \"obj_id\":\"item trashed - '+i+'\",\"obj_type\":\"VTODO\",\"status\":1,\"sync_token\":0,\"trash_time\":1,\"ref\":1 '+'}';",
							"}",
							"pm.environment.set(\"CreateTrash\", stringJson);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"trashs\":\n    [\n        {{CreateTrash}}\n    ]\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Trash - Create 50 items trashed",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5a8b375e-00c5-46ab-bed6-f0d4df121c60",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Create Trash - Create 50 items trashed',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Create Trash - Create 50 items trashed',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg ;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = statusResponse;",
							"    var count = json.data.length;",
							"    if(count == 50){",
							"        var id = [];",
							"        for(var i = 0; i<50; i++){",
							"            var object_id = pm.environment.get(\"id-\"+i);",
							"            var obj_id = json.data[i].trash.obj_id;",
							"            if(object_id == obj_id){",
							"                msg.description = \"Data response enough 50 items trashed.\";",
							"                pm.environment.unset(\"id-\"+i);",
							"                pm.environment.set(\"id-\"+i,json.data[i].trash.id);",
							"                id[i] = json.data[i].trash.id;",
							"            }else{",
							"                msg = msgFailed;",
							"                msg.description = \"Data response not contain item trashed.\";",
							"                break;",
							"            }",
							"            ",
							"        } pm.environment.set(\"50_id_trash\",id);",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.description = \"Data response not enough 50 items trashed.\";",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "2af82208-2f2d-4102-ac40-5d7d7224cc8c",
						"exec": [
							"var stringJson = \"\";",
							"for(var i = 0; i< 50; i++){",
							"    var id_trashed = \"item trashed - \"+i;",
							"    pm.environment.set(\"id-\"+i,id_trashed)",
							"    stringJson = (stringJson === \"\" ? stringJson : stringJson+', ')+'{ \"obj_id\":\"item trashed - '+i+'\",\"obj_type\":\"VTODO\",\"status\":1,\"sync_token\":0,\"trash_time\":1,\"ref\":1 '+'}';",
							"}",
							"pm.environment.set(\"CreateTrash\", stringJson);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"trashs\":\n    [\n        {{CreateTrash}}\n    ]\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Trash - 50 items trashed",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "163aa772-4e3a-45a1-b6ff-3b856d370240",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection: \"API-Trash\",",
							"    title: 'Failed - Delete Trash - 50 items trashed',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"DELETE\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection: \"API-Trash\",",
							"    title: 'Passed - Delete Trash - 50 items trashed',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"DELETE\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"var msg ;",
							"",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    if(!dataResponse.includes(\"data_error\")){",
							"        var count = json.data.length;",
							"        if(count == 50){",
							"            msg.description = \"Delete 50 items trashed correctly.\";",
							"        }else{",
							"            msg.description=\"Response data null\";",
							"        }",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.description=dataResponse;",
							"    }",
							"    ",
							"}else{",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash/{{over50items}}?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash",
						"{{over50items}}"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get List Trashed - Get  All Items Trashed",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f0b53be4-cc03-40e1-b56f-e5203b68d0be",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Get - Get All Trash Item',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"GET\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Get - Get All Trash Item',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"GET\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    var count = json.data.length;",
							"    if(count >0){",
							"        msg.description=\"Get all items trashed successful\";",
							"        var count = json.data.length;",
							"        var id = [];",
							"        for(var i = 0; i < count; i++){",
							"            id[i] = json.data[i].trash.id;",
							"            pm.environment.set(\"IDS\",id[0]);",
							"            pm.environment.set(\"MinID\",id[0]);",
							"        }",
							"        // Set all and id trash in environment.",
							"        pm.environment.set(\"id_all_trash\",id);",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Return null data\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "token",
						"value": "{{keyapi}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "fields",
							"value": "id,obj_id",
							"disabled": true
						},
						{
							"key": "pItem",
							"value": "2",
							"disabled": true
						},
						{
							"key": "ids",
							"value": "325430",
							"disabled": true
						},
						{
							"key": "minID",
							"value": "53526",
							"disabled": true
						},
						{
							"key": "modifiedGTE",
							"value": "1553074626.641",
							"disabled": true
						},
						{
							"key": "modifiedLT",
							"value": "1553074626.542",
							"disabled": true
						},
						{
							"key": "minDelID",
							"value": "1053666",
							"disabled": true
						},
						{
							"key": "has_del",
							"value": "1",
							"disabled": true
						},
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get List Trashed - Get  A Items Trashed",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f0b53be4-cc03-40e1-b56f-e5203b68d0be",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Get List Trashed - Get  A Items Trashed',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"GET\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Get List Trashed - Get  A Items Trashed',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"GET\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var ids = pm.environment.get(\"IDS\");",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    if(dataResponse.includes(\"trash\")  && ids == json.data[0].trash.id){",
							"        msg.description=\"Get  A Items Trashed successful\";",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Get  A Items Trashed not successful\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}&ids={{IDS}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "fields",
							"value": "id,obj_id",
							"disabled": true
						},
						{
							"key": "pItem",
							"value": "2",
							"disabled": true
						},
						{
							"key": "minID",
							"value": "53526",
							"disabled": true
						},
						{
							"key": "modifiedGTE",
							"value": "1536200806",
							"disabled": true
						},
						{
							"key": "modifiedLT",
							"value": "1553582893.997",
							"disabled": true
						},
						{
							"key": "minDelID",
							"value": "1053666",
							"disabled": true
						},
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "ids",
							"value": "{{IDS}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get List Trashed - Get  10 Items Trashed",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f0b53be4-cc03-40e1-b56f-e5203b68d0be",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Get List Trashed - Get  10 Items Trashed',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"GET\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Get List Trashed - Get  10 Items Trashed',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"GET\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var Minid = parseInt(pm.environment.get(\"MinID\"));",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    var count = json.data.length;",
							"    if(count==10  && parseInt(json.data[0].trash.id) > Minid){",
							"        msg.description=\"Get  10 Items Trashed successful\";",
							"        pm.environment.set(\"ModifiedGTE1\",json.data[9].trash.updated_date);",
							"        var id = [];",
							"        for(var i = 0; i < count; i++){",
							"            id[i] = json.data[i].trash.id;",
							"            pm.environment.set(\"10itemid-\"+i,json.data[i].trash.id);",
							"        }",
							"        // Set all and id trash in environment.",
							"        pm.environment.set(\"10_id_trash\",id);",
							"        pm.environment.set(\"MinID\",json.data[9].trash.id);",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Get  10 Items Trashed not successful\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}&minID={{MinID}}&pItem=10",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "fields",
							"value": "id,obj_id",
							"disabled": true
						},
						{
							"key": "ids",
							"value": "325430",
							"disabled": true
						},
						{
							"key": "modifiedGTE",
							"value": "1536200806",
							"disabled": true
						},
						{
							"key": "modifiedLT",
							"value": "1536200806",
							"disabled": true
						},
						{
							"key": "minDelID",
							"value": "1053666",
							"disabled": true
						},
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "minID",
							"value": "{{MinID}}"
						},
						{
							"key": "pItem",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get List Trashed - Get  15 Items Trashed - ModifiedGTE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f0b53be4-cc03-40e1-b56f-e5203b68d0be",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Get List Trashed - Get  15 Items Trashed - ModifiedGTE',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"GET\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Get List Trashed - Get  15 Items Trashed - ModifiedGTE',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"GET\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var Updated_date = pm.environment.get(\"ModifiedGTE1\");",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    var count = json.data.length;",
							"    if(count==15){",
							"        msg.description=\"Get  15 Items Trashed - ModifiedGTE successful\";",
							"        var id = [];",
							"        for(var i = 0; i < count; i++){",
							"            id[i] = json.data[i].trash.id;",
							"            pm.environment.set(\"15itemid-\"+i,json.data[i].trash.id);",
							"        }",
							"        // Set all and id trash in environment.",
							"        pm.environment.set(\"15_id_trash\",id);",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Get  15 Items Trashed - ModifiedGTE not successful\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}&minID={{MinID}}&modifiedGTE={{ModifiedGTE1}}&pItem=15",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "fields",
							"value": "id,obj_id",
							"disabled": true
						},
						{
							"key": "ids",
							"value": "325430",
							"disabled": true
						},
						{
							"key": "modifiedLT",
							"value": "1536200806",
							"disabled": true
						},
						{
							"key": "minDelID",
							"value": "1053666",
							"disabled": true
						},
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "minID",
							"value": "{{MinID}}"
						},
						{
							"key": "modifiedGTE",
							"value": "{{ModifiedGTE1}}"
						},
						{
							"key": "pItem",
							"value": "15"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Trash - Update none id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cb296844-d165-4cb6-820c-2baaa01b0185",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Update Trash - Update none id',",
							"    endpoint: pm.environment.get('version')+\"/trash/update\",",
							"    method: \"PUT\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Update Trash - Update none id',",
							"    endpoint: pm.environment.get('version')+\"/trash/update\",",
							"    method: \"PUT\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    var count = json.data.length;",
							"    if(count===0){",
							"        msg.description=\"Cannot update trash item without parameter id\";",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Update trash item without parameter id\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n    \n        \"obj_id\":\"link-1\",         \n        \"obj_type\":\"LINK\",\n        \"status\":1,\n        \"sync_token\":0,\n        \"trash_time\":1,\n        \"ref\":123123123123123123123123\n \n    }\n]"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash/update?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash",
						"update"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Trash - Update with null id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ceb32ec2-0647-4dad-b888-9054a7ee4367",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Update Trash - Update with null id',",
							"    endpoint: pm.environment.get('version')+\"/trash/update\",",
							"    method: \"PUT\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Update Trash - Update with null id',",
							"    endpoint: pm.environment.get('version')+\"/trash/update\",",
							"    method: \"PUT\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    var count = json.data.length;",
							"    if(count===0){",
							"        msg.description=\"Cannot update trash item with null parameter id\";",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Update trash item with null parameter id\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n    \t\"id\": null,\n        \"obj_id\":\"link-1\",         \n        \"obj_type\":\"LINK\",\n        \"status\":1,\n        \"sync_token\":0,\n        \"trash_time\":1,\n        \"ref\":123123123123123123123123\n \n    }\n]"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash/update?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash",
						"update"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Trash - Update with wrong id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "58d7f85a-dd54-47a2-9a8d-ea9d79a4cbbf",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Update Trash - Update with wrong id',",
							"    endpoint: pm.environment.get('version')+\"/trash/update\",",
							"    method: \"PUT\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Update Trash - Update with wrong id',",
							"    endpoint: pm.environment.get('version')+\"/trash/update\",",
							"    method: \"PUT\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    if(dataResponse.includes(\"data_error\")){",
							"        msg.error=\"Cannot update trash item with wrong parameter id\";",
							"        msg.description=dataResponse;",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Update trash item with wrong parameter id\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n    \t\"id\": 5772,\n        \"obj_id\":\"link-1\",         \n        \"obj_type\":\"LINK\",\n        \"status\":1,\n        \"sync_token\":0,\n        \"trash_time\":1,\n        \"ref\":123123123123123123123123\n \n    }\n]"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash/update?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash",
						"update"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Trash - Update with invalid value inputted",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "58d7f85a-dd54-47a2-9a8d-ea9d79a4cbbf",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Update Trash - Update with invalid value inputted',",
							"    endpoint: pm.environment.get('version')+\"/trash/update\",",
							"    method: \"PUT\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Update Trash - Update with invalid value inputted',",
							"    endpoint: pm.environment.get('version')+\"/trash/update\",",
							"    method: \"PUT\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    if(dataResponse.includes(\"data_error\")){",
							"        msg.error=\"Cannot update with invalid value inputted\";",
							"        msg.description=dataResponse;",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Allow to update with invalid value inputted\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n    \t\"id\": \"{{idEmail}}\",\n        \"obj_id\":\"link-1\",         \n        \"obj_type\":\"12automationqcflo@gmail.automationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.com\",\n        \"status\":1,\n        \"sync_token\":0,\n        \"trash_time\":1,\n        \"ref\":123123123123123123123123\n \n    }\n]"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash/update?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash",
						"update"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Trash - Update with invalid type of id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "11e114d1-af8e-4882-a72b-6868aa681bf5",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "950a79aa-6c30-49b1-8823-bd65ddb29408",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Update Trash - Update with invalid type of id',",
							"    endpoint: pm.environment.get('version')+\"/trash/update\",",
							"    method: \"PUT\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Update Trash - Update with invalid type of id',",
							"    endpoint: pm.environment.get('version')+\"/trash/update\",",
							"    method: \"PUT\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    if(dataResponse.includes(\"data_error\")){",
							"        msg.error=\"Cannot update trash item with invalid type of id\";",
							"        msg.description=dataResponse;",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Update trash item with invalid type of id\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n    \t\"id\": \"'{{IDS}}'\",\n        \"obj_id\":\"link-1\",         \n        \"obj_type\":\"LINK\",\n        \"status\":1,\n        \"sync_token\":0,\n        \"trash_time\":1,\n        \"ref\":123123123123123123123123\n \n    }\n]"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash/update?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash",
						"update"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Trash - Update valid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ca30b5e9-1c1f-42ef-a971-2ffc86cd8ab2",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Update Trash - Update valid id',",
							"    endpoint: pm.environment.get('version')+\"/trash/update\",",
							"    method: \"PUT\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Update Trash - Update valid id',",
							"    endpoint: pm.environment.get('version')+\"/trash/update\",",
							"    method: \"PUT\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var id = Number(pm.environment.get(\"IDS\"));",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    if(id == json.data[0].trash.id){",
							"        msg.description = \"Update trash item with valid id successful\";",
							"        pm.environment.set(\"ModifiedGTE1\",json.data[0].trash.updated_date);",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Update trash item with valid id not successful\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n    \t\"id\":\"{{IDS}}\",\n        \"obj_id\":\"123d\",         \n        \"obj_type\":\"LINK\",\n        \"status\":1,\n        \"sync_token\":0,\n        \"trash_time\":1,\n        \"ref\":123123123123123123123123\n \n    }\n]"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash/update?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash",
						"update"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get List Trashed - Get  item trash updated - ModifiedGTE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f0b53be4-cc03-40e1-b56f-e5203b68d0be",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Get item trash updated - ModifiedGTE',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"GET\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Get item trash updated - ModifiedGTE',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"GET\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var ids = pm.environment.get(\"IDS\");",
							"var updatedDate = pm.environment.get(\"ModifiedGTE1\");",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    if(dataResponse.includes(\"trash\")  && ids == json.data[0].trash.id && updatedDate == json.data[0].trash.updated_date){",
							"        msg.description=\"Get item trash updated - ModifiedGTE successful\";",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Get item trash updated - ModifiedGTE not successful\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}&modifiedGTE={{ModifiedGTE1}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "fields",
							"value": "id,obj_id",
							"disabled": true
						},
						{
							"key": "pItem",
							"value": "10",
							"disabled": true
						},
						{
							"key": "ids",
							"value": "325430",
							"disabled": true
						},
						{
							"key": "minID",
							"value": "57702",
							"disabled": true
						},
						{
							"key": "modifiedLT",
							"value": "1536200806",
							"disabled": true
						},
						{
							"key": "minDelID",
							"value": "1053666",
							"disabled": true
						},
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "modifiedGTE",
							"value": "{{ModifiedGTE1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Trash - Update valid 50 items trashed",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ca30b5e9-1c1f-42ef-a971-2ffc86cd8ab2",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection: \"API-Trash\",",
							"    title: 'Failed - Update Trash - Update valid 50 items trashed',",
							"    endpoint: pm.environment.get('version')+\"/trash/update\",",
							"    method: \"PUT\",",
							"    error: \"Has Error\",",
							"    status:\"\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection: \"API-Trash\",",
							"    title: 'Passed - Update Trash - Update valid 50 items trashed',",
							"    endpoint: pm.environment.get('version')+\"/trash/update\",",
							"    method: \"PUT\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"var msg ;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    var count = json.data.length;",
							"    if(count === 50){",
							"        for(var i = 0; i < count; i++){",
							"            var trashID = parseInt(pm.environment.get(\"id-\"+i)); // convernt string to int",
							"            var idTrash = json.data[i].trash.id; // int",
							"            if(trashID === idTrash){",
							"                msg.description = \"Update valid 50 items trashed correctly\";",
							"                pm.environment.set(\"updated_date_0\",json.data[0].trash.updated_date);",
							"            }else{",
							"                msg = msgFailed;",
							"                msg.error = \"Description response failed\";",
							"                msg.description=\"Update valid 50 items trashed incorrectly\";",
							"                break;",
							"            }",
							"        }",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Description response failed\";",
							"        msg.description=\"Update valid 50 items trashed incorrectly\";",
							"    }",
							"}else{",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "4b05ec73-906f-4eb6-9dfd-99405e1c94c1",
						"exec": [
							"var Array_50idTrash = pm.environment.get(\"50_id_trash\");",
							"var count = Array_50idTrash.length;",
							"// convert Array to String",
							"var idTrash = Array_50idTrash.toString();",
							"var stringJson = \"\";",
							"for(var i = 0; i< count; i++){",
							"    var listIDTrash = idTrash.split(\",\")[i];",
							"    // pm.environment.set(\"kanbanid-\"+i,listIDTrash);",
							"    stringJson = (stringJson === \"\" ? stringJson : stringJson+', ')+'{ \"id\":'+listIDTrash+',\"obj_id\":\"123d\",\"obj_type\":\"VTODO\",\"status\":1,\"sync_token\":0,\"trash_time\":1,\"ref\":123123123123123123123123'+'}';",
							"}",
							"",
							"pm.environment.set(\"UpdateTrash\", stringJson);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\n    {{UpdateTrash}}\n]"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash/update?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash",
						"update"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get List Trashed - Get  50 items trash updated - ModifiedGTE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f0b53be4-cc03-40e1-b56f-e5203b68d0be",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection: \"API-Trash\",",
							"    title: 'Failed - Get List Trashed - Get  50 items trash updated - ModifiedGTE',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"GET\",",
							"    error: \"Has Error\",",
							"    status:\"\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection: \"API-Trash\",",
							"    title: 'Passed - Get List Trashed - Get  50 items trash updated - ModifiedGTE',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"GET\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"var msg ;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    var count = json.data.length;",
							"    if(count>0){",
							"        // Get updated date from Environment",
							"        var getModifiedLGT = pm.environment.get(\"updated_date_0\");",
							"        // Get frist updated date in data response to compare",
							"        var update_0 = json.data[0].trash.updated_date;",
							"        if(update_0 => getModifiedLGT && count === 50){",
							"            msg.description = \"Get  50 items trash updated - ModifiedGTE: \"+getModifiedLGT+\" correctly\";",
							"            pm.environment.set(\"minID[29]\",json.data[29].trash.id);",
							"        }else{",
							"            msg = msgFailed;",
							"            msg.error = \"Description response failed\";",
							"            msg.description=\"Get  50 items trash updated - ModifiedGTE: \"+getModifiedLGT+\" incorrectly\";",
							"        }",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.status = statusResponse;",
							"        msg.error = \"Return null Data\";",
							"        msg.description=dataResponse;",
							"    }",
							"    ",
							"}else{",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}&has_del=0&modifiedGTE={{updated_date_0}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "fields",
							"value": "id,obj_id",
							"disabled": true
						},
						{
							"key": "pItem",
							"value": "10",
							"disabled": true
						},
						{
							"key": "ids",
							"value": "325430",
							"disabled": true
						},
						{
							"key": "minID",
							"value": "57702",
							"disabled": true
						},
						{
							"key": "modifiedLT",
							"value": "1536200806",
							"disabled": true
						},
						{
							"key": "minDelID",
							"value": "1053666",
							"disabled": true
						},
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "has_del",
							"value": "0"
						},
						{
							"key": "modifiedGTE",
							"value": "{{updated_date_0}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Trash - invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f7a13a37-0881-4a2e-884d-0020b4bbbdcf",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Delete Trash - invalid id',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"DELETE\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Delete Trash - invalid id',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"DELETE\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    if(dataResponse.includes(\"data_error\")){",
							"        msg.error=\"Cannot delete item trashed with invalid parameter id\";",
							"        msg.description=dataResponse;",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Delete item trashed with invalid parameter id\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "token",
						"value": "{{keyapi}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash/121?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash",
						"121"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Trash - a item trashed",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "44e7615a-0c99-4578-8430-8bd896a0f2d7",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Delete Trash - a item trashed',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"DELETE\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Delete Trash - a item trashed',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"DELETE\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var id = Number(pm.environment.get(\"IDS\"));",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    if(id == json.data[0].id){",
							"        msg.description = \"Delete a item trashed successful\";",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Delete a item trashed not successful\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "token",
						"value": "{{keyapi}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash/{{IDS}}?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash",
						"{{IDS}}"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get List Trashed - Get a item trash deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "af106186-c266-46e3-9262-36e390645213",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Get List Trashed - Get a item trash deleted',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"GET\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Get List Trashed - Get a item trash deleted',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"GET\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var ids = pm.environment.get(\"IDS\");",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    if(dataResponse.includes(\"data_del\")  && ids == json.data_del[0].deleted_item.item_id){",
							"        msg.description=\"Get a item trash deleted successful\";",
							"        pm.environment.set(\"ModifiedGTE1\",json.data_del[0].deleted_item.updated_date+2);",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Get a item trash deleted not successful\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}&has_del=1&ids={{IDS}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "fields",
							"value": "id,obj_id",
							"disabled": true
						},
						{
							"key": "pItem",
							"value": "10",
							"disabled": true
						},
						{
							"key": "minID",
							"value": "57702",
							"disabled": true
						},
						{
							"key": "modifiedGTE",
							"value": "1553073687.733",
							"disabled": true
						},
						{
							"key": "modifiedLT",
							"value": "1536200806",
							"disabled": true
						},
						{
							"key": "minDelID",
							"value": "1053666",
							"disabled": true
						},
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "has_del",
							"value": "1"
						},
						{
							"key": "ids",
							"value": "{{IDS}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Trash - 10 items trashed",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "163aa772-4e3a-45a1-b6ff-3b856d370240",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection: \"API-Trash\",",
							"    title: 'Failed - Delete Trash - 10 items trashed',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"DELETE\",",
							"    error: \"Has Error\",",
							"    status:\"\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection: \"API-Trash\",",
							"    title: 'Passed - Delete Trash - 10 items trashed',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"DELETE\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"var msg ;",
							"",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    if(!dataResponse.includes(\"data_error\")){",
							"        var count = json.data.length;",
							"        // convert Array to String",
							"        for(var i = 0; i < count; i++){",
							"        var trashID = Number(pm.environment.get(\"10itemid-\"+i));",
							"        var idTrash = Number(json.data[i].id);",
							"        if(trashID === idTrash){",
							"            msg.description = \"Delete 10 items trashed correctly.\";",
							"            msg.error = \"No Error\";",
							"        ",
							"        }else{",
							"            msg = msgFailed;",
							"            msg.error = \"Description response failed\";",
							"            msg.description=\"Delete 10 items trashed incorrectly\";",
							"            break;",
							"        }",
							"    }",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"10 items trashed not found\";",
							"        msg.description=dataResponse;",
							"    }",
							"    ",
							"}else{",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "token",
						"value": "{{keyapi}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash/{{10_id_trash}}?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash",
						"{{10_id_trash}}"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get List Trashed - Get 10  items trash deleted - ModifiedGTE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "044caf88-aac7-408c-bfa3-5c8ac9051235",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Get List Trashed - Get 10  items trash deleted - ModifiedGTE',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"GET\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Get List Trashed - Get 10  items trash deleted - ModifiedGTE',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"GET\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    var count = json.data_del.length;",
							"    for(var i = 0; i< count; i++){",
							"        var idData = pm.environment.get(\"10itemid-\"+i);",
							"        var idEvn = json.data_del[i].deleted_item.item_id;",
							"        if(idData == idEvn){",
							"            msg.description=\"Get 10  items trash deleted successful\";",
							"            pm.environment.set(\"ModifiedGTE1\",json.data_del[9].deleted_item.updated_date+1);",
							"            pm.environment.set(\"minDell\",json.data_del[9].deleted_item.id);",
							"        }else{",
							"            msg = msgFailed;",
							"            msg.error = \"Get 10  items trash deleted not successful\";",
							"            msg.description=dataResponse;",
							"            break;",
							"        }",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}&modifiedGTE={{ModifiedGTE1}}&has_del=1&pItem=10",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "fields",
							"value": "id,obj_id",
							"disabled": true
						},
						{
							"key": "ids",
							"value": "325430",
							"disabled": true
						},
						{
							"key": "minID",
							"value": "57702",
							"disabled": true
						},
						{
							"key": "modifiedLT",
							"value": "1536200806",
							"disabled": true
						},
						{
							"key": "minDelID",
							"value": "1053666",
							"disabled": true
						},
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "modifiedGTE",
							"value": "{{ModifiedGTE1}}"
						},
						{
							"key": "has_del",
							"value": "1"
						},
						{
							"key": "pItem",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Recover Trash - None param \"re_ids\"",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "060b2aab-985a-405f-bf79-0819772909be",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Recover Trash - None param \"re_ids\"',",
							"    endpoint: pm.environment.get('version')+\"/trash/0\",",
							"    method: \"DELETE\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Recover Trash - None param \"re_ids\"',",
							"    endpoint: pm.environment.get('version')+\"/trash/0\",",
							"    method: \"DELETE\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    var count = json.data.length;",
							"    if(count===0){",
							"        msg.description=\"Cannot recover trash item without parameter re_ids\";",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"recover trash item without parameter re_ids\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"value": "{{keyapi}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash/0?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash",
						"0"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Recover Trash - wrong item trashed",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7d379855-22c4-46b6-addf-45130249c3c5",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Recover Trash - wrong item trashed',",
							"    endpoint: pm.environment.get('version')+\"/trash/0\",",
							"    method: \"DELETE\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Recover Trash - wrong item trashed',",
							"    endpoint: pm.environment.get('version')+\"/trash/0\",",
							"    method: \"DELETE\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"",
							"    if(dataResponse.includes(\"data_error\")){",
							"        msg.error=\"Wrong id item trashed\";",
							"        msg.description=dataResponse;",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Recover Trash - wrong item trashed\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "token",
						"value": "{{keyapi}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"re_ids\": \"123\"\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash/0?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash",
						"0"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Recover Trash - Invalid type param \"re_ids\" (int)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d4a77b14-84a8-4375-ba77-1a97026b754a",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Recover Trash - Invalid type param \"re_ids\" (int)',",
							"    endpoint: pm.environment.get('version')+\"/trash/0\",",
							"    method: \"DELETE\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Recover Trash - Invalid type param \"re_ids\" (int)',",
							"    endpoint: pm.environment.get('version')+\"/trash/0\",",
							"    method: \"DELETE\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"",
							"    if(dataResponse.includes(\"data_error\")){",
							"        msg.error=\"Invalid type param re_ids (int)\";",
							"        msg.description=dataResponse;",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Invalid type param re_ids (int)\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"value": "{{keyapi}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"re_ids\": 123\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash/0?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash",
						"0"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Recover Trash - 15 value items trashed",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "25f0321e-f04b-4905-9f7f-158cd487c22e",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Recover Trash - 15 value items trashed',",
							"    endpoint: pm.environment.get('version')+\"/trash/0\",",
							"    method: \"DELETE\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Recover Trash - 15 value items trashed',",
							"    endpoint: pm.environment.get('version')+\"/trash/0\",",
							"    method: \"DELETE\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    var count = json.data.length;",
							"    for(var i = 0; i< count; i++){",
							"        var idData = pm.environment.get(\"15itemid-\"+i);",
							"        var idEvn = json.data[i].id;",
							"        if(idData == idEvn){",
							"            msg.description=\"Recover Trash - 15 value items trashed successful\";",
							"            }else{",
							"            msg = msgFailed;",
							"            msg.error = \"Recover Trash - 15 value items trashed not successful\";",
							"            msg.description=dataResponse;",
							"            break;",
							"        }",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"value": "{{keyapi}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"re_ids\": \"{{15_id_trash}}\"\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash/0?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash",
						"0"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Recover Trash - 1 value items trashed",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "71232b93-f1c8-4220-b133-e805ed98107e",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Recover Trash - 1 value items trashed',",
							"    endpoint: pm.environment.get('version')+\"/trash/0\",",
							"    method: \"DELETE\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Recover Trash - 1 value items trashed',",
							"    endpoint: pm.environment.get('version')+\"/trash/0\",",
							"    method: \"DELETE\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    var count = json.data.length;",
							"    var idData = pm.environment.get(\"idEmail\");",
							"    var idEvn = json.data[0].id;",
							"    if(idData == idEvn){",
							"        msg.description=\"Recover Trash - 1 value items trashed successful\";",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Recover Trash - 1 value items trashed not successful\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "token",
						"value": "{{keyapi}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"re_ids\": \"{{idEmail}}\"\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash/0?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash",
						"0"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get List Trashed - Get  All Items Trashed Pre-Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f0b53be4-cc03-40e1-b56f-e5203b68d0be",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Get - Get All Trash Item',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"GET\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Get - Get All Trash Item',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"GET\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    var count = json.data.length;",
							"    if(count >0){",
							"        msg.description=\"Get all items trashed successful\";",
							"        var count = json.data.length;",
							"        var id = [];",
							"        for(var i = 0; i < count; i++){",
							"            id[i] = json.data[i].trash.id;",
							"            pm.environment.set(\"IDS\",id[0]);",
							"            pm.environment.set(\"MinID\",id[30]);",
							"        }",
							"        // Set all and id trash in environment.",
							"        pm.environment.set(\"id_all_trash\",id);",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Return null data\";",
							"        msg.description=dataResponse;",
							"        pm.environment.set(\"id_all_trash\",id);",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "fields",
							"value": "id,obj_id",
							"disabled": true
						},
						{
							"key": "pItem",
							"value": "2",
							"disabled": true
						},
						{
							"key": "ids",
							"value": "325430",
							"disabled": true
						},
						{
							"key": "minID",
							"value": "53526",
							"disabled": true
						},
						{
							"key": "modifiedGTE",
							"value": "1553074626.641",
							"disabled": true
						},
						{
							"key": "modifiedLT",
							"value": "1553074626.542",
							"disabled": true
						},
						{
							"key": "minDelID",
							"value": "1053666",
							"disabled": true
						},
						{
							"key": "has_del",
							"value": "1",
							"disabled": true
						},
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Trash - Delete all items trashed",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c5c39661-4237-4d76-9f58-5085be4f75d3",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection: \"API-Trash\",",
							"    title: 'Failed - Delete Trash - Delete all items trashed',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"DELETE\",",
							"    error: \"Has Error\",",
							"    status:\"\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection: \"API-Trash\",",
							"    title: 'Passed - Delete Trash - Delete all items trashed',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"DELETE\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"var msg ;",
							"",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    if(!dataResponse.includes(\"data_error\")){",
							"        var count = json.data.length;",
							"        // convert Array to String",
							"        for(var i = 0; i < count; i++){",
							"            var idTrash = pm.environment.get(\"id_all_trash\").toString();",
							"            var listIDTrash = Number(idTrash.split(\",\")[i]);",
							"            if(dataResponse.includes(listIDTrash)){",
							"                msg.description = \"Delete all items trashed correctly.\";",
							"            }else{",
							"                msg = msgFailed;",
							"                msg.error = \"Not found item to delete\";",
							"                msg.description=\"Delete all items trashed incorrectly\";",
							"                break;",
							"        }",
							"    }",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Not found item to delete\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else{",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash/{{id_all_trash}}?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash",
						"{{id_all_trash}}"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Trash - Create 50 items trashed Pre-Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5a8b375e-00c5-46ab-bed6-f0d4df121c60",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-Trash',",
							"    title: 'Failed - Create Trash - Create 50 items trashed',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-Trash',",
							"    title: 'Passed - Create Trash - Create 50 items trashed',",
							"    endpoint: pm.environment.get('version')+\"/trash\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg ;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = statusResponse;",
							"    var count = json.data.length;",
							"    if(count == 50){",
							"        var id = [];",
							"        for(var i = 0; i<50; i++){",
							"            var object_id = pm.environment.get(\"id-\"+i);",
							"            var obj_id = json.data[i].trash.obj_id;",
							"            if(object_id == obj_id){",
							"                msg.description = \"Data response enough 50 items trashed.\";",
							"                pm.environment.unset(\"id-\"+i);",
							"                pm.environment.set(\"id-\"+i,json.data[i].trash.id);",
							"                id[i] = json.data[i].trash.id;",
							"            }else{",
							"                msg = msgFailed;",
							"                msg.description = \"Data response not contain item trashed.\";",
							"                break;",
							"            }",
							"            ",
							"        } pm.environment.set(\"50_id_trash\",id);",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.description = \"Data response not enough 50 items trashed.\";",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "2af82208-2f2d-4102-ac40-5d7d7224cc8c",
						"exec": [
							"var stringJson = \"\";",
							"for(var i = 0; i< 50; i++){",
							"    var id_trashed = \"item trashed - \"+i;",
							"    pm.environment.set(\"id-\"+i,id_trashed)",
							"    stringJson = (stringJson === \"\" ? stringJson : stringJson+', ')+'{ \"obj_id\":\"item trashed - '+i+'\",\"obj_type\":\"VTODO\",\"status\":1,\"sync_token\":0,\"trash_time\":1,\"ref\":1 '+'}';",
							"}",
							"pm.environment.set(\"CreateTrash\", stringJson);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"trashs\":\n    [\n        {{CreateTrash}}\n    ]\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Recover Trash - All Item Trashed",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "29ee9ae1-3e53-4615-9d5e-6d273042887a",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection: \"API-Trash\",",
							"    title: 'Failed - Recover Trash - All Item Trashed',",
							"    endpoint: pm.environment.get('version')+\"/trash/0\",",
							"    method: \"DELETE\",",
							"    error: \"Has Error\",",
							"    status:\"\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection: \"API-Trash\",",
							"    title: 'Passed - Recover Trash - All Item Trashed',",
							"    endpoint: pm.environment.get('version')+\"/trash/0\",",
							"    method: \"DELETE\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"var msg ;",
							"",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    if(!dataResponse.includes(\"data_error\")){",
							"        var count = json.data.length;",
							"        // convert Array to String",
							"        for(var i = 0; i < count; i++){",
							"            var idTrash = pm.environment.get(\"50_id_trash\").toString();",
							"            var listIDTrash = Number(idTrash.split(\",\")[i]);",
							"            if(dataResponse.includes(listIDTrash)){",
							"                msg.description = \"Recover Trash - All Item Trashed correctly.\";",
							"            }else{",
							"                msg = msgFailed;",
							"                msg.error = \"Not found item to recover\";",
							"                msg.description=\"Recover Trash - All Item Trashed incorrectly\";",
							"                break;",
							"        }",
							"    }",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Not found item to recover\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else{",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "token",
						"value": "{{keyapi}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"re_ids\": \"{{50_id_trash}}\"\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash/0?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash",
						"0"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get List Trashed - Clean Up",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f0b53be4-cc03-40e1-b56f-e5203b68d0be",
						"exec": [
							"// Clean up environment",
							"pm.environment.unset(\"idEmail\");",
							"pm.environment.unset(\"50_id_trash\");",
							"pm.environment.unset(\"IDS\");",
							"pm.environment.unset(\"MinID\");",
							"pm.environment.unset(\"id_all_trash\");",
							"pm.environment.unset(\"ModifiedGTE1\");",
							"pm.environment.unset(\"10_id_trash\");",
							"pm.environment.unset(\"15_id_trash\");",
							"pm.environment.unset(\"updated_date_0\");",
							"pm.environment.unset(\"minID[29]\");",
							"pm.environment.unset(\"minDell\");",
							"pm.environment.unset(\"CreateTrash\");",
							"pm.environment.unset(\"UpdateTrash\");",
							"pm.environment.unset(\"over50items\");",
							"for(var i = 0; i<50; i++){",
							"    pm.environment.unset(\"id-\"+i);",
							"    pm.environment.unset(\"15itemid-\"+i);",
							"    pm.environment.unset(\"10itemid-\"+i);",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/trash?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"trash"
					],
					"query": [
						{
							"key": "fields",
							"value": "id,obj_id",
							"disabled": true
						},
						{
							"key": "pItem",
							"value": "2",
							"disabled": true
						},
						{
							"key": "ids",
							"value": "325430",
							"disabled": true
						},
						{
							"key": "minID",
							"value": "53526",
							"disabled": true
						},
						{
							"key": "modifiedGTE",
							"value": "1553074626.641",
							"disabled": true
						},
						{
							"key": "modifiedLT",
							"value": "1553074626.542",
							"disabled": true
						},
						{
							"key": "minDelID",
							"value": "1053666",
							"disabled": true
						},
						{
							"key": "has_del",
							"value": "1",
							"disabled": true
						},
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		}
	]
}