{
	"info": {
		"_postman_id": "0d697c7f-d61d-4428-af84-b7b793b3bd01",
		"name": "API-Obj Order v2.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "RUN ALL SCRIPTS API - OBJ ORDER",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e1b744bb-acc2-4081-aac1-a4f8c9a6cfbb",
						"exec": [
							"var email_U1 = pm.environment.get(\"email_U1\");",
							"var email = pm.environment.get(\"email\");",
							"if(email_U1 === undefined){",
							"    pm.environment.set(\"email\",email);",
							"    pm.environment.set(\"password\",pm.environment.get(\"password\"));",
							"}else{",
							"    pm.environment.set(\"email\",email_U1);",
							"    pm.environment.set(\"password\",pm.environment.get(\"password_U1\"));",
							"}",
							"// Use the CryptoJS",
							"var hash = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\")+\":LeftCoastLogic:\"+pm.environment.get(\"password\"))+pm.environment.get(\"appreg\")).toString();",
							"",
							"console.log(\"sig: \" + hash);",
							"postman.setEnvironmentVariable(\"sig\", hash);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "64ab487d-2eda-44c8-b027-39943e652ed9",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"",
							"var keyapi = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\") + pm.environment.get(\"appreg\")) + json.tokenapi).toString();",
							"",
							"postman.setEnvironmentVariable(\"token\", json.tokenapi);",
							"postman.setEnvironmentVariable(\"keyapi\", keyapi);",
							"",
							"var msgFailed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Test Version: '+pm.environment.get('version')+'\\nFailed - Pretest - Login',",
							"    endpoint: pm.environment.get('version')+\"/users/token.json\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Test Version: '+pm.environment.get('version')+'\\nPassed - Pretest - Login',",
							"    endpoint: pm.environment.get('version')+\"/users/token.json\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"var statusResponse = responseCode.code;",
							"var msg ;",
							"if(statusResponse == 200){",
							"    pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    var body = json.description;",
							"    if(body==\"Flo\"){",
							"        msg.description=body;",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Description response failed\";",
							"        msg.description=body;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\"",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"email\": \"{{email}}\",\n\t\"alias\": \"{{alias}}\",\n\t\"sig\": \"{{sig}}\"\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/users/token.json",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"users",
						"token.json"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Order - Update order 2 object with (objtype = 2)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fa8ab53b-06ba-45d7-b81a-fa66455e4267",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"",
							"var msgFailed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Failed - Update Order - Update order 2 object with (objtype = 2)',",
							"    endpoint: pm.environment.get('version')+\"/objorder/update\",",
							"    method: \"PUT\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Passed - Update Order - Update order 2 object with (objtype = 2)',",
							"    endpoint: pm.environment.get('version')+\"/objorder/update\",",
							"    method: \"PUT\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"    var count = json.data.length;",
							"    if(count===2){",
							"        msg.description=\"Update object order with objtype = 2 successful\";",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Update object order with objtype = 2 not successful\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[{\n        \"obj_id\": \"d67d64f4-2c66-4dbf-8405-bb31b5d8e4a1\"\n}, {\n        \"obj_id\": \"6039d27c-2f77-4f55-92d7-9d84e1a8812e\"\n}]"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/objorder/update?keyapi={{keyapi}}&returnRes=1&objtype=2",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"objorder",
						"update"
					],
					"query": [
						{
							"key": "top",
							"value": "1",
							"disabled": true
						},
						{
							"key": "bottom",
							"value": "1",
							"disabled": true
						},
						{
							"key": "source_account",
							"value": "11",
							"disabled": true
						},
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "returnRes",
							"value": "1"
						},
						{
							"key": "objtype",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Order - Update order 2 object with invalid value inputted (objtype = 2)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fa8ab53b-06ba-45d7-b81a-fa66455e4267",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"",
							"var msgFailed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Failed - Update Order - Update order 2 object with invalid value inputted (objtype = 2) ',",
							"    endpoint: pm.environment.get('version')+\"/objorder/update\",",
							"    method: \"PUT\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Passed - Update Order - Update order 2 object with invalid value inputted (objtype = 2) ',",
							"    endpoint: pm.environment.get('version')+\"/objorder/update\",",
							"    method: \"PUT\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"    if(!dataResponse.includes(\"error\")){",
							"        msg.error = \"Cannot update order 2 items with invalid value\";",
							"        msg.description=dataResponse;",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Allow to update order 2 items with invalid value\"",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/objorder/update?keyapi={{keyapi}}&returnRes=1&objtype=2",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"objorder",
						"update"
					],
					"query": [
						{
							"key": "top",
							"value": "1",
							"disabled": true
						},
						{
							"key": "bottom",
							"value": "1",
							"disabled": true
						},
						{
							"key": "source_account",
							"value": "11",
							"disabled": true
						},
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "returnRes",
							"value": "1"
						},
						{
							"key": "objtype",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Order - Update object type = 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2e115e5e-acd7-46d9-b314-cee3af6caa67",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"",
							"var msgFailed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Failed - Update Order - Update object type = 1',",
							"    endpoint: pm.environment.get('version')+\"/objorder/update\",",
							"    method: \"PUT\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Passed - Update Order - Update object type = 1',",
							"    endpoint: pm.environment.get('version')+\"/objorder/update\",",
							"    method: \"PUT\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"    var count = json.data.length;",
							"    if(count===0){",
							"        msg.error=\"Cannot update object order with type = 1\";",
							"        msg.description=dataResponse;",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Update object order with type = 1\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\n\n\t{ \n\t\t\"obj_id\":\"11\",\n\t\t\"source_account\":0\n\t},\n\t{ \n\t\t\"obj_id\":\"12\",\n\t\t\"source_account\":0\n\t}\n\n]"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/objorder/update?keyapi={{keyapi}}&returnRes=1&objtype=1",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"objorder",
						"update"
					],
					"query": [
						{
							"key": "top",
							"value": "1",
							"disabled": true
						},
						{
							"key": "bottom",
							"value": "1",
							"disabled": true
						},
						{
							"key": "source_account",
							"value": "11",
							"disabled": true
						},
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "returnRes",
							"value": "1"
						},
						{
							"key": "objtype",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Order - Update without parameter objtype",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c411d5fc-b77c-4179-b341-ea4de5a9faac",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"",
							"var msgFailed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Failed - Update Order - Update without parameter objtype',",
							"    endpoint: pm.environment.get('version')+\"/objorder/update\",",
							"    method: \"PUT\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Passed - Update Order - Update without parameter objtype',",
							"    endpoint: pm.environment.get('version')+\"/objorder/update\",",
							"    method: \"PUT\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"    var count = json.data.length;",
							"    if(count===0){",
							"        msg.error=\"Cannot update without parameter objtype\";",
							"        msg.description=dataResponse;",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Update without parameter objtype\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n        \"obj_id\":\"71f77c16-6c9c-4a34-be17-829c29910cff\"\n    },\n    {\n        \"obj_id\":\"fa99b0e9-b08b-460a-bcd7-8b16baf005b4\"\n    }\n]"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/objorder/update?keyapi={{keyapi}}&returnRes=1",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"objorder",
						"update"
					],
					"query": [
						{
							"key": "top",
							"value": "1",
							"disabled": true
						},
						{
							"key": "bottom",
							"value": "1",
							"disabled": true
						},
						{
							"key": "source_account",
							"value": "11",
							"disabled": true
						},
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "returnRes",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Order - Update without parameter obj_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e58b2f84-988b-4723-bd48-198cde92af14",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"",
							"var msgFailed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Failed - Update Order - Update without parameter obj_id',",
							"    endpoint: pm.environment.get('version')+\"/objorder/update\",",
							"    method: \"PUT\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Passed - Update Order - Update without parameter obj_id',",
							"    endpoint: pm.environment.get('version')+\"/objorder/update\",",
							"    method: \"PUT\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"    var count = json.data.length;",
							"    if(count===0){",
							"        msg.error=\"Cannot update without parameter obj_id\";",
							"        msg.description=dataResponse;",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Update without parameter obj_id\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\n        {\n               \"source_account\":0\n        }\n]"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/objorder/update?keyapi={{keyapi}}&returnRes=1&objtype=2",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"objorder",
						"update"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "returnRes",
							"value": "1"
						},
						{
							"key": "bottom",
							"value": "1",
							"disabled": true
						},
						{
							"key": "source_account",
							"value": "11",
							"disabled": true
						},
						{
							"key": "objtype",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Order - Update without parameter required objtype and obj_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e58b2f84-988b-4723-bd48-198cde92af14",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"",
							"var msgFailed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Failed - Update Order - Update without parameter required objtype and obj_id',",
							"    endpoint: pm.environment.get('version')+\"/objorder/update\",",
							"    method: \"PUT\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Passed - Update Order - Update without parameter required objtype and obj_id',",
							"    endpoint: pm.environment.get('version')+\"/objorder/update\",",
							"    method: \"PUT\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"    var count = json.data.length;",
							"    if(count===0){",
							"        msg.error=\"Cannot update without parameter required objtype and obj_id\";",
							"        msg.description=dataResponse;",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Update without parameter required objtype and obj_id\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\n        {\n                \"source_account\":1\n        }\n]"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/objorder/update?keyapi={{keyapi}}&returnRes=1",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"objorder",
						"update"
					],
					"query": [
						{
							"key": "bottom",
							"value": "1",
							"disabled": true
						},
						{
							"key": "source_account",
							"value": "11",
							"disabled": true
						},
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "returnRes",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Order - 10 items",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7f361148-d151-4632-a592-53dde1590746",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"",
							"var msgFailed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Failed - Update Order - 10 items',",
							"    endpoint: pm.environment.get('version')+\"/objorder/update\",",
							"    method: \"PUT\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Passed - Update Order - 10 items',",
							"    endpoint: pm.environment.get('version')+\"/objorder/update\",",
							"    method: \"PUT\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"var count = json.data.length;",
							"    if(count===10){",
							"        msg.description=\"Update object order 10 items successful\";",
							"        var id = [];",
							"        for(var i = 0; i < count; i++){",
							"            id[i] = json.data[i].item.id;",
							"        }",
							"        pm.environment.set(\"idItem\",id);",
							"        pm.environment.set(\"updatedTime-7\",json.data[7].item.updated_date);",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Update object order 10 items not successful\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"value": "{{keyapi}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\n\n\t{ \n\t\t\"obj_id\":\"1\",\n\t\t\"source_account\":0\n\t},\n\t{ \n\t\t\"obj_id\":\"2\",\n\t\t\"source_account\":0\n\t},\n\t{ \n\t\t\"obj_id\":\"3\",\n\t\t\"source_account\":0\n\t},\n\t{ \n\t\t\"obj_id\":\"4\",\n\t\t\"source_account\":0\n\t},\n\t{ \n\t\t\"obj_id\":\"5\",\n\t\t\"source_account\":0\n\t},\n\t{ \n\t\t\"obj_id\":\"6\",\n\t\t\"source_account\":0\n\t},\n\t{ \n\t\t\"obj_id\":\"7\",\n\t\t\"source_account\":0\n\t},\n\t{ \n\t\t\"obj_id\":\"8\",\n\t\t\"source_account\":0\n\t},\n\t{ \n\t\t\"obj_id\":\"9\",\n\t\t\"source_account\":0\n\t},\n\t{ \n\t\t\"obj_id\":\"10\",\n\t\t\"source_account\":0\n\t}\n\n]"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/objorder/update?keyapi={{keyapi}}&objtype=2&returnRes=1",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"objorder",
						"update"
					],
					"query": [
						{
							"key": "top",
							"value": "1",
							"disabled": true
						},
						{
							"key": "bottom",
							"value": "1",
							"disabled": true
						},
						{
							"key": "source_account",
							"value": "11",
							"disabled": true
						},
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "objtype",
							"value": "2"
						},
						{
							"key": "returnRes",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Order - Get 3 item after updated - ModifiedGTE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6e0b3de6-5132-4174-bade-2c9c16e79119",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"",
							"var msgFailed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Failed - Get Order - Get 3 item after updated',",
							"    endpoint: pm.environment.get('version')+\"/objorder\",",
							"    method: \"GET\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Passed - Get Order - Get 3 item after updated',",
							"    endpoint: pm.environment.get('version')+\"/objorder\",",
							"    method: \"GET\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var updated_date = pm.environment.get(\"updatedTime-7\");",
							"",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"    var count = json.data.length;",
							"    if(count===3 && updated_date == json.data[0].item.updated_date){",
							"        msg.description=\"Get 3 item after updated successful\";",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Get 3 item after updated not successful\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/objorder?keyapi={{keyapi}}&modifiedGTE={{updatedTime-7}}&fields=id,obj_type,obj_id,source_account,updated_date,order_number",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"objorder"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "modifiedGTE",
							"value": "{{updatedTime-7}}"
						},
						{
							"key": "bottom",
							"value": "1",
							"disabled": true
						},
						{
							"key": "pItem",
							"value": "5",
							"disabled": true
						},
						{
							"key": "fields",
							"value": "id,obj_type,obj_id,source_account,updated_date,order_number"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Order - 2 items",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7f361148-d151-4632-a592-53dde1590746",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Failed - Update Order - 2 items',",
							"    endpoint: pm.environment.get('version')+\"/objorder/update\",",
							"    method: \"PUT\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Passed - Update Order - 2 items',",
							"    endpoint: pm.environment.get('version')+\"/objorder/update\",",
							"    method: \"PUT\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"var count = json.data.length;",
							"    if(count===2){",
							"        msg.description=\"Update object order 2 items successful\";",
							"        pm.environment.set(\"updatedTimeNewest\",json.data[1].item.updated_date);",
							"         pm.environment.set(\"idObjOrder\",json.data[1].item.id);",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Update object order 2 items not successful\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\n\n\t{ \n\t\t\"obj_id\":\"11\",\n\t\t\"source_account\":0\n\t},\n\t{ \n\t\t\"obj_id\":\"12\",\n\t\t\"source_account\":0\n\t}\n\n]"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/objorder/update?keyapi={{keyapi}}&objtype=2&returnRes=1",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"objorder",
						"update"
					],
					"query": [
						{
							"key": "top",
							"value": "1",
							"disabled": true
						},
						{
							"key": "bottom",
							"value": "1",
							"disabled": true
						},
						{
							"key": "source_account",
							"value": "11",
							"disabled": true
						},
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "objtype",
							"value": "2"
						},
						{
							"key": "returnRes",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Order - Get a item newest after update",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6bd7d430-35b6-4c4e-ad69-0b810fcde600",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Failed - Get Order - Get a item newest after update',",
							"    endpoint: pm.environment.get('version')+\"/objorder\",",
							"    method: \"GET\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Passed - Get Order - Get a item newest after update',",
							"    endpoint: pm.environment.get('version')+\"/objorder\",",
							"    method: \"GET\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var idObjOder = pm.environment.get(\"idObjOrder\");",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"    if(idObjOder == json.data[0].item.id){",
							"        msg.description=\"Get a item newest after update successful\";",
							"        pm.environment.set(\"idItem1\",json.data[0].item.id);",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Get a item newest after update not successful\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/objorder?keyapi={{keyapi}}&modifiedGTE={{updatedTimeNewest}}&fields=id,obj_type,obj_id,source_account,updated_date,order_number",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"objorder"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "modifiedGTE",
							"value": "{{updatedTimeNewest}}"
						},
						{
							"key": "bottom",
							"value": "1",
							"disabled": true
						},
						{
							"key": "pItem",
							"value": "5",
							"disabled": true
						},
						{
							"key": "fields",
							"value": "id,obj_type,obj_id,source_account,updated_date,order_number"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Order - Get All Items - objtype = 1 (URL)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d0559d8f-bb0c-4f48-aa7d-5a46eb1d0c9f",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7925c739-7b34-4be0-8157-01bd8887cf8d",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Failed - Get Order - Get All Items - objtype = 1 (URL)',",
							"    endpoint: pm.environment.get('version')+\"/objorder\",",
							"    method: \"GET\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Passed - Get Order - Get All Items - objtype = 1 (URL)',",
							"    endpoint: pm.environment.get('version')+\"/objorder\",",
							"    method: \"GET\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"    var count = json.data.length;",
							"    if(count > 0){",
							"        if(!dataResponse.includes(\"error\") && dataResponse.includes(\"url\")){",
							"            msg.description=\"Get all items object order objtype = 1 successful\";",
							"        }else{",
							"            msg = msgFailed;",
							"            msg.error = \"Get all items object order objtype = 1 not successful\";",
							"            msg.description=dataResponse;",
							"        }",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Response null data\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/objorder?keyapi={{keyapi}}&bottom=1&objtype=1",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"objorder"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "bottom",
							"value": "1"
						},
						{
							"key": "objtype",
							"value": "1"
						},
						{
							"key": "fields",
							"value": "id,obj_type,obj_id,source_account,updated_date,order_number",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Order - Get All Items - objtype = 3 (KANBAN)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d0559d8f-bb0c-4f48-aa7d-5a46eb1d0c9f",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7925c739-7b34-4be0-8157-01bd8887cf8d",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Failed - Get Order - Get All Items - objtype = 3 (KANBAN)',",
							"    endpoint: pm.environment.get('version')+\"/objorder\",",
							"    method: \"GET\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Passed - Get Order - Get All Items - objtype = 3 (KANBAN)',",
							"    endpoint: pm.environment.get('version')+\"/objorder\",",
							"    method: \"GET\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"    var count = json.data.length;",
							"    if(count > 0){",
							"        if(!dataResponse.includes(\"error\") && dataResponse.includes(\"kanban_type\")){",
							"            msg.description=\"Get all items object order objtype = 3 successful\";",
							"        }else{",
							"            msg = msgFailed;",
							"            msg.error = \"Get all items object order objtype = 3 not successful\";",
							"            msg.description=dataResponse;",
							"        }",
							"    }else{",
							"        msg.error = \"Response null data\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/objorder?keyapi={{keyapi}}&bottom=1&objtype=3",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"objorder"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "bottom",
							"value": "1"
						},
						{
							"key": "objtype",
							"value": "3"
						},
						{
							"key": "fields",
							"value": "id,obj_type,obj_id,source_account,updated_date,order_number",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Order - Get All Items - objtype = 4 (CANVANS)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d0559d8f-bb0c-4f48-aa7d-5a46eb1d0c9f",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7925c739-7b34-4be0-8157-01bd8887cf8d",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Failed - Get Order - Get All Items - objtype = 4 (CANVANS)',",
							"    endpoint: pm.environment.get('version')+\"/objorder\",",
							"    method: \"GET\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Passed - Get Order - Get All Items - objtype = 4 (CANVANS)',",
							"    endpoint: pm.environment.get('version')+\"/objorder\",",
							"    method: \"GET\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"    var count = json.data.length;",
							"    if(count > 0){",
							"        if(!dataResponse.includes(\"error\") && dataResponse.includes(\"item_card_order\")){",
							"            msg.description=\"Get all items object order objtype = 4 successful\";",
							"        }else{",
							"            msg = msgFailed;",
							"            msg.error = \"Get all items object order objtype = 4 not successful\";",
							"            msg.description=dataResponse;",
							"        }",
							"    }else{",
							"        msg.error = \"Response null data\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/objorder?keyapi={{keyapi}}&bottom=1&objtype=4",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"objorder"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "bottom",
							"value": "1"
						},
						{
							"key": "objtype",
							"value": "4"
						},
						{
							"key": "fields",
							"value": "id,obj_type,obj_id,source_account,updated_date,order_number",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Order - Get All Items",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d0559d8f-bb0c-4f48-aa7d-5a46eb1d0c9f",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7925c739-7b34-4be0-8157-01bd8887cf8d",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Failed - Get Order - Get All Items',",
							"    endpoint: pm.environment.get('version')+\"/objorder\",",
							"    method: \"GET\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Passed - Get Order - Get All Items',",
							"    endpoint: pm.environment.get('version')+\"/objorder\",",
							"    method: \"GET\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"    if(!dataResponse.includes(\"error\")){",
							"        msg.description=\"Get all items object order successful\";",
							"        var count = json.data.length;",
							"        var id = [];",
							"        for(var i = 0; i < count; i++){",
							"            id[i] = json.data[i].item.id;",
							"        }",
							"        // Set all and id trash in environment.",
							"        pm.environment.set(\"id_all_order\",id);",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Get all items object order not successful\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "token",
						"value": "{{keyapi}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/objorder?keyapi={{keyapi}}&bottom=1&objtype=2",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"objorder"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "bottom",
							"value": "1"
						},
						{
							"key": "objtype",
							"value": "2"
						},
						{
							"key": "fields",
							"value": "id,obj_type,obj_id,source_account,updated_date,order_number",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Object Order - with param obj_ids as type int",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "83435699-d5c6-4452-ac36-351de2cfde0c",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Failed - Search Object Order - with param obj_ids as type int',",
							"    endpoint: pm.environment.get('version')+\"/objorder/search\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Passed - Search Object Order - with param obj_ids as type int',",
							"    endpoint: pm.environment.get('version')+\"/objorder/search\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    var obj_id_data = json.data[0].item.obj_id;",
							"    var obj_type_data = json.data[0].item.obj_type;",
							"    pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"    if(obj_id_data == \"2\" && obj_type_data == \"VTODO\"){",
							"        msg.description=\"Search Object Order - with param obj_ids as type int successful\";",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Search Object Order - with param obj_ids as type int not successful\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "token",
						"value": "{{keyapi}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"objtype\": 2,\n    \"obj_ids\": 2\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/objorder/search?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"objorder",
						"search"
					],
					"query": [
						{
							"key": "has_del",
							"value": "1",
							"disabled": true
						},
						{
							"key": "fields",
							"value": "id",
							"disabled": true
						},
						{
							"key": "objtype",
							"value": "2",
							"disabled": true
						},
						{
							"key": "obj_ids",
							"value": "eff94a50-fabf-0136-ff05-005056030716",
							"disabled": true
						},
						{
							"key": "pItem",
							"value": "2",
							"disabled": true
						},
						{
							"key": "ids",
							"value": "13074",
							"disabled": true
						},
						{
							"key": "modifiedGTE",
							"value": "1547784396",
							"disabled": true
						},
						{
							"key": "modifiedLT",
							"value": "1547786717",
							"disabled": true
						},
						{
							"key": "minDelID",
							"value": "141163",
							"disabled": true
						},
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Object Order - with param obj_type = 2 show an item",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7488e66c-9dcd-4fcd-95df-dda4d840227d",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Failed - Search Object Order - with param obj_type = 2 show an item',",
							"    endpoint: pm.environment.get('version')+\"/objorder/search\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Passed - Search Object Order - with param obj_type = 2 show an item',",
							"    endpoint: pm.environment.get('version')+\"/objorder/search\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"",
							"var obj_type_data = json.data[0].item.obj_type;",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"    if(obj_type_data == \"VTODO\"){",
							"        msg.description=\"Search Object Order - with param obj_type = 2 show an item successful\";",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Search Object Order - with param obj_type = 2 show an item not successful\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "9b2fc702-f062-4743-960c-f826eabd22d1",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"objtype\": 2,\n    \"obj_ids\": \"3\"\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/objorder/search?keyapi={{keyapi}}&pItem=2",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"objorder",
						"search"
					],
					"query": [
						{
							"key": "has_del",
							"value": "1",
							"disabled": true
						},
						{
							"key": "fields",
							"value": "id",
							"disabled": true
						},
						{
							"key": "objtype",
							"value": "2",
							"disabled": true
						},
						{
							"key": "obj_ids",
							"value": "eff94a50-fabf-0136-ff05-005056030716",
							"disabled": true
						},
						{
							"key": "ids",
							"value": "13074",
							"disabled": true
						},
						{
							"key": "modifiedGTE",
							"value": "1547784396",
							"disabled": true
						},
						{
							"key": "modifiedLT",
							"value": "1547786717",
							"disabled": true
						},
						{
							"key": "minDelID",
							"value": "141163",
							"disabled": true
						},
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "pItem",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Object Order - with param obj_type = 2 with pItem = 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5b37e646-cdb0-46a0-b169-1b29b04586b1",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Failed - Search Object Order - with param obj_type = 2 with pItem = 5',",
							"    endpoint: pm.environment.get('version')+\"/objorder/search\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Passed - Search Object Order - with param obj_type = 2 with pItem = 5',",
							"    endpoint: pm.environment.get('version')+\"/objorder/search\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"    var count = json.data.length;",
							"    for(var i =0; i<count; i++){",
							"        var obj_type_data = json.data[i].item.obj_type;",
							"        console.log(obj_type_data)",
							"        if(!dataResponse.includes(\"error\") && obj_type_data == \"VTODO\"){",
							"            msg.description=\"Search Object Order - with param obj_type = 2 with pItem = 5 successful\";",
							"            pm.environment.set(\"modifiedGTE_Search\",json.data[4].item.updated_date);",
							"        }else{",
							"            msg = msgFailed;",
							"            msg.error = \"Search Object Order - with param obj_type = 2 with pItem = 5 not successful\";",
							"            msg.description=dataResponse;",
							"            break;",
							"        }",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"objtype\": 2\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/objorder/search?keyapi={{keyapi}}&pItem=5",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"objorder",
						"search"
					],
					"query": [
						{
							"key": "has_del",
							"value": "1",
							"disabled": true
						},
						{
							"key": "fields",
							"value": "id",
							"disabled": true
						},
						{
							"key": "objtype",
							"value": "2",
							"disabled": true
						},
						{
							"key": "obj_ids",
							"value": "eff94a50-fabf-0136-ff05-005056030716",
							"disabled": true
						},
						{
							"key": "ids",
							"value": "13074",
							"disabled": true
						},
						{
							"key": "modifiedGTE",
							"value": "1547784396",
							"disabled": true
						},
						{
							"key": "modifiedLT",
							"value": "1547786717",
							"disabled": true
						},
						{
							"key": "minDelID",
							"value": "141163",
							"disabled": true
						},
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "pItem",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Object Order - with param obj_type = 2 with modifiedGTE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "91525243-9cd8-4d9b-bfb6-7a5ff3d18681",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Failed - Search Object Order - with param obj_type = 2 with modifiedGTE',",
							"    endpoint: pm.environment.get('version')+\"/objorder/search\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Passed - Search Object Order - with param obj_type = 2 with modifiedGTE',",
							"    endpoint: pm.environment.get('version')+\"/objorder/search\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var modifiedGTE_Search = pm.environment.get(\"modifiedGTE_Search\");",
							"",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"    var count = json.data.length;",
							"    for(var i =0; i<count; i++){",
							"        var obj_type_data = json.data[i].item.updated_date;",
							"        if(!dataResponse.includes(\"error\") && obj_type_data >= modifiedGTE_Search){",
							"        msg.description=\"Search Object Order - with param obj_type = 2 with modifiedGTE successful\";",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Search Object Order -with param obj_type = 2 with modifiedGTE not successful\";",
							"        msg.description=dataResponse;",
							"        break;",
							"    }",
							"    }",
							"    ",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"objtype\": 2\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/objorder/search?keyapi={{keyapi}}&modifiedGTE={{modifiedGTE_Search}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"objorder",
						"search"
					],
					"query": [
						{
							"key": "has_del",
							"value": "1",
							"disabled": true
						},
						{
							"key": "fields",
							"value": "id",
							"disabled": true
						},
						{
							"key": "objtype",
							"value": "2",
							"disabled": true
						},
						{
							"key": "obj_ids",
							"value": "eff94a50-fabf-0136-ff05-005056030716",
							"disabled": true
						},
						{
							"key": "pItem",
							"value": "2",
							"disabled": true
						},
						{
							"key": "ids",
							"value": "13074",
							"disabled": true
						},
						{
							"key": "modifiedLT",
							"value": "1547786717",
							"disabled": true
						},
						{
							"key": "minDelID",
							"value": "141163",
							"disabled": true
						},
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "modifiedGTE",
							"value": "{{modifiedGTE_Search}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Object Order - with param obj_type = 1 - URL",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ac01e349-3617-4ebf-baf0-5c1bdaed452d",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Failed - Search Object Order - with param obj_type = 1 - URL',",
							"    endpoint: pm.environment.get('version')+\"/objorder/search\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Passed - Search Object Order - with param obj_type = 1 - URL',",
							"    endpoint: pm.environment.get('version')+\"/objorder/search\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var msg;",
							"",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"    var count = json.data.length;",
							"    if(count > 0){",
							"        if(!dataResponse.includes(\"error\") && dataResponse.includes(\"url\")){",
							"            msg.description=\"Search Object Order - with param obj_type = 1 - URL successful\";",
							"        }else{",
							"            msg = msgFailed;",
							"            msg.error = \"Search Object Order - with param obj_type = 1 - URL not successful\";",
							"            msg.description=dataResponse;",
							"        }",
							"    }else{",
							"        msg.description=dataResponse;",
							"        msg.error = \"Response null data\";",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"objtype\": 1\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/objorder/search?keyapi={{keyapi}}&pItem=2",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"objorder",
						"search"
					],
					"query": [
						{
							"key": "has_del",
							"value": "1",
							"disabled": true
						},
						{
							"key": "fields",
							"value": "id",
							"disabled": true
						},
						{
							"key": "objtype",
							"value": "1",
							"disabled": true
						},
						{
							"key": "obj_ids",
							"value": "eff94a50-fabf-0136-ff05-005056030716",
							"disabled": true
						},
						{
							"key": "ids",
							"value": "13074",
							"disabled": true
						},
						{
							"key": "modifiedGTE",
							"value": "1547784396",
							"disabled": true
						},
						{
							"key": "modifiedLT",
							"value": "1547786717",
							"disabled": true
						},
						{
							"key": "minDelID",
							"value": "141163",
							"disabled": true
						},
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "pItem",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Object Order - with param obj_type = 2 - TODO",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b54171d3-8419-4608-b300-524ef8f6a201",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Failed - Search Object Order - with param obj_type = 2 - TODO',",
							"    endpoint: pm.environment.get('version')+\"/objorder/search\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Passed - Search Object Order - with param obj_type = 2 - TODO',",
							"    endpoint: pm.environment.get('version')+\"/objorder/search\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var msg;",
							"",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"    var count = json.data.length;",
							"    if(count > 0){",
							"        if(!dataResponse.includes(\"error\") && dataResponse.includes(\"VTODO\")){",
							"        msg.description=\"Search Object Order - with param obj_type = 2 - TODO successful\";",
							"        }else{",
							"            msg = msgFailed;",
							"            msg.error = \"Search Object Order - with param obj_type = 2 - TODO not successful\";",
							"            msg.description=dataResponse;",
							"        }",
							"    }else{",
							"        msg.description=dataResponse;",
							"        msg.error = \"Response null data\";",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"objtype\": 2\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/objorder/search?keyapi={{keyapi}}&pItem=2",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"objorder",
						"search"
					],
					"query": [
						{
							"key": "has_del",
							"value": "1",
							"disabled": true
						},
						{
							"key": "fields",
							"value": "id",
							"disabled": true
						},
						{
							"key": "objtype",
							"value": "2",
							"disabled": true
						},
						{
							"key": "obj_ids",
							"value": "eff94a50-fabf-0136-ff05-005056030716",
							"disabled": true
						},
						{
							"key": "ids",
							"value": "13074",
							"disabled": true
						},
						{
							"key": "modifiedGTE",
							"value": "1553154432.406",
							"disabled": true
						},
						{
							"key": "modifiedLT",
							"value": "1547786717",
							"disabled": true
						},
						{
							"key": "minDelID",
							"value": "141163",
							"disabled": true
						},
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "pItem",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Object Order - with param obj_type = 3 - KANBAN",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6eb166a5-7dfc-454f-a62c-c1ddf8208d52",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Failed - Search Object Order - with param obj_type = 3 - KANBAN',",
							"    endpoint: pm.environment.get('version')+\"/objorder/search\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Passed - Search Object Order - with param obj_type = 3 - KANBAN',",
							"    endpoint: pm.environment.get('version')+\"/objorder/search\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var msg;",
							"",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"    var count = json.data.length;",
							"    if(count > 0){",
							"        if(!dataResponse.includes(\"error\") && dataResponse.includes(\"kanban_type\")){",
							"            msg.description=\"Search Object Order - with param obj_type = 3 - KANBAN successful\";",
							"        }else{",
							"            msg = msgFailed;",
							"            msg.error = \"Search Object Order - with param obj_type = 3 - KANBAN not successful\";",
							"            msg.description=dataResponse;",
							"        }",
							"    }else{",
							"        msg.description=dataResponse;",
							"        msg.error = \"Response null data\";",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"objtype\": 3\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/objorder/search?keyapi={{keyapi}}&pItem=2",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"objorder",
						"search"
					],
					"query": [
						{
							"key": "has_del",
							"value": "1",
							"disabled": true
						},
						{
							"key": "fields",
							"value": "id",
							"disabled": true
						},
						{
							"key": "objtype",
							"value": "3",
							"disabled": true
						},
						{
							"key": "obj_ids",
							"value": "eff94a50-fabf-0136-ff05-005056030716",
							"disabled": true
						},
						{
							"key": "ids",
							"value": "13074",
							"disabled": true
						},
						{
							"key": "modifiedGTE",
							"value": "1547784396",
							"disabled": true
						},
						{
							"key": "modifiedLT",
							"value": "1547786717",
							"disabled": true
						},
						{
							"key": "minDelID",
							"value": "141163",
							"disabled": true
						},
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "pItem",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Object Order - with param obj_type = 4 - CANVAS",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fd5cdfd0-7335-415c-83c1-80275403b955",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Failed - Search Object Order - with param obj_type = 4 - CANVAS',",
							"    endpoint: pm.environment.get('version')+\"/objorder/search\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Passed - Search Object Order - with param obj_type = 4 - CANVAS',",
							"    endpoint: pm.environment.get('version')+\"/objorder/search\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var msg;",
							"",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"    var count = json.data.length;",
							"    if(count > 0){",
							"        if(!dataResponse.includes(\"error\") && dataResponse.includes(\"item_card_order\")){",
							"            msg.description=\"Search Object Order - with param obj_type = 4 - CANVAS successful\";",
							"        }else{",
							"            msg = msgFailed;",
							"            msg.error = \"Search Object Order - with param obj_type = 4 - CANVAS not successful\";",
							"            msg.description=dataResponse;",
							"        }",
							"    }else{",
							"        msg.description=dataResponse;",
							"        msg.error = \"Response null data\";",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"objtype\": 4\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/objorder/search?keyapi={{keyapi}}&pItem=2",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"objorder",
						"search"
					],
					"query": [
						{
							"key": "has_del",
							"value": "1",
							"disabled": true
						},
						{
							"key": "fields",
							"value": "id",
							"disabled": true
						},
						{
							"key": "objtype",
							"value": "4",
							"disabled": true
						},
						{
							"key": "obj_ids",
							"value": "eff94a50-fabf-0136-ff05-005056030716",
							"disabled": true
						},
						{
							"key": "ids",
							"value": "13074",
							"disabled": true
						},
						{
							"key": "modifiedGTE",
							"value": "1547784396",
							"disabled": true
						},
						{
							"key": "modifiedLT",
							"value": "1547786717",
							"disabled": true
						},
						{
							"key": "minDelID",
							"value": "141163",
							"disabled": true
						},
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "pItem",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Object Order - with param obj_type as type String",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5af9e3bf-748a-415b-bc7e-f1b00a810075",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Failed - Search Object Order - with param obj_type as type String',",
							"    endpoint: pm.environment.get('version')+\"/objorder/search\",",
							"    method: \"POST\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Passed - Search Object Order - with param obj_type as type String',",
							"    endpoint: pm.environment.get('version')+\"/objorder/search\",",
							"    method: \"POST\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var msg;",
							"",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"    var count = json.data.length;",
							"    if(count > 0){",
							"        if(!dataResponse.includes(\"error\")){",
							"        msg.description=\"Search Object Order - with param obj_type as type String successful\";",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Search Object Order - with param obj_type as type String not successful\";",
							"        msg.description=dataResponse;",
							"    }",
							"    }else{",
							"        msg.description=dataResponse;",
							"        msg.error = \"Response null data\";",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"objtype\": \"4\"\n}"
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/objorder/search?keyapi={{keyapi}}&pItem=2",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"objorder",
						"search"
					],
					"query": [
						{
							"key": "has_del",
							"value": "1",
							"disabled": true
						},
						{
							"key": "fields",
							"value": "id",
							"disabled": true
						},
						{
							"key": "objtype",
							"value": "2",
							"disabled": true
						},
						{
							"key": "obj_ids",
							"value": "eff94a50-fabf-0136-ff05-005056030716",
							"disabled": true
						},
						{
							"key": "ids",
							"value": "13074",
							"disabled": true
						},
						{
							"key": "modifiedGTE",
							"value": "1547784396",
							"disabled": true
						},
						{
							"key": "modifiedLT",
							"value": "1547786717",
							"disabled": true
						},
						{
							"key": "minDelID",
							"value": "141163",
							"disabled": true
						},
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "pItem",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Order - Delete wrong id order",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "176a8d88-46f7-4a6d-8b3f-f1ee093245c9",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Failed - Delete Order - Delete wrong id order',",
							"    endpoint: pm.environment.get('version')+\"/objorder\",",
							"    method: \"DELETE\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Passed - Delete Order - Delete wrong id order',",
							"    endpoint: pm.environment.get('version')+\"/objorder\",",
							"    method: \"DELETE\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var msg;",
							"",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"    if(dataResponse.includes(\"data_error\")){",
							"        msg.error = \"Cannot delete wrong id\";",
							"        msg.description=dataResponse;",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Response delete wrong id success\";",
							"        msg.description=dataResponse;",
							"    }",
							"    ",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/objorder/123?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"objorder",
						"123"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Order - Delete a id order",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "176a8d88-46f7-4a6d-8b3f-f1ee093245c9",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Failed - Delete Order - Delete a id order',",
							"    endpoint: pm.environment.get('version')+\"/objorder\",",
							"    method: \"DELETE\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Passed - Delete Order - Delete a id order',",
							"    endpoint: pm.environment.get('version')+\"/objorder\",",
							"    method: \"DELETE\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var msg;",
							"var id = pm.environment.get(\"idItem1\");",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"    if(!dataResponse.includes(\"data_error\")&&id == json.data[0].id){",
							"        msg.description=dataResponse;",
							"        pm.environment.set(\"ids1\",json.data[0].id);",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Response delete a item not success\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/objorder/{{idItem1}}?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"objorder",
						"{{idItem1}}"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Order - Get All Items - Pre-Test",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d0559d8f-bb0c-4f48-aa7d-5a46eb1d0c9f",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7925c739-7b34-4be0-8157-01bd8887cf8d",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Failed - Get Order - Get All Items',",
							"    endpoint: pm.environment.get('version')+\"/objorder\",",
							"    method: \"GET\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Passed - Get Order - Get All Items',",
							"    endpoint: pm.environment.get('version')+\"/objorder\",",
							"    method: \"GET\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var msg;",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"    if(!dataResponse.includes(\"error\")){",
							"        msg.description=\"Get all items object order successful\";",
							"        var count = json.data.length;",
							"        var id = [];",
							"        for(var i = 0; i < count; i++){",
							"            id[i] = json.data[i].item.id;",
							"        }",
							"        // Set all and id trash in environment.",
							"        pm.environment.set(\"id_all_order\",id);",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Get all items object order not successful\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/objorder?keyapi={{keyapi}}&bottom=1&fields=id,obj_type,obj_id,source_account,updated_date,order_number",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"objorder"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "bottom",
							"value": "1"
						},
						{
							"key": "fields",
							"value": "id,obj_type,obj_id,source_account,updated_date,order_number"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Order - Delete all id order",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "176a8d88-46f7-4a6d-8b3f-f1ee093245c9",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Failed - Delete Order - Delete all id order',",
							"    endpoint: pm.environment.get('version')+\"/objorder\",",
							"    method: \"DELETE\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Passed - Delete Order - Delete all id order',",
							"    endpoint: pm.environment.get('version')+\"/objorder\",",
							"    method: \"DELETE\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status response",
							"var statusResponse = responseCode.code;",
							"var msg ;",
							"",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"    if(!dataResponse.includes(\"data_error\")){",
							"        var count = json.data.length;",
							"        // convert Array to String",
							"        for(var i = 0; i < count; i++){",
							"            var idOrder = pm.environment.get(\"id_all_order\").toString();",
							"            var listIDOrder = Number(idOrder.split(\",\")[i]);",
							"            if(dataResponse.includes(listIDOrder)){",
							"                msg.description = \"Delete all id order correctly.\";",
							"                pm.environment.set(\"ids\",json.data[0].id);",
							"            }else{",
							"                msg = msgFailed;",
							"                msg.error = \"Not found item to delete\";",
							"                msg.description=\"Delete all id order incorrectly\";",
							"                break;",
							"        }",
							"    }",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Not found item to delete\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else{",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"Status response failed\";",
							"    msg.description=dataResponse;",
							"}",
							"",
							"var Url_report = pm.environment.get(\"url_report\");",
							"pm.sendRequest({",
							"    url: Url_report,",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/objorder/{{id_all_order}}?keyapi={{keyapi}}",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"objorder",
						"{{id_all_order}}"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Order - Get an item after deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1bfde7d4-bf11-49ea-bad1-a05fd099f45b",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Failed - Get Order - Get an item after deleted',",
							"    endpoint: pm.environment.get('version')+\"/objorder\",",
							"    method: \"GET\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Passed - Get Order - Get an item after deleted',",
							"    endpoint: pm.environment.get('version')+\"/objorder\",",
							"    method: \"GET\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var msg;",
							"var id = Number(pm.environment.get(\"ids1\"));",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"    if(!dataResponse.includes(\"error\") && id == Number(json.data_del[0].item.item_id)){",
							"        msg.description=\"Get an item after deleted successful\";",
							"        pm.environment.set(\"id_del_min\",json.data_del[0].item.id-1);",
							"    }else{",
							"        msg = msgFailed;",
							"        msg.error = \"Get an item after deleted not successful\";",
							"        msg.description=dataResponse;",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "token",
						"value": "{{keyapi}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/objorder?keyapi={{keyapi}}&fields=id,obj_type,obj_id,source_account,updated_date,order_number&ids={{ids1}}&has_del=1&pItem=3",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"objorder"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "fields",
							"value": "id,obj_type,obj_id,source_account,updated_date,order_number"
						},
						{
							"key": "ids",
							"value": "{{ids1}}"
						},
						{
							"key": "has_del",
							"value": "1"
						},
						{
							"key": "pItem",
							"value": "3"
						},
						{
							"key": "bottom",
							"value": "1",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Order - Get All 5 Items deleted",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d0559d8f-bb0c-4f48-aa7d-5a46eb1d0c9f",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7925c739-7b34-4be0-8157-01bd8887cf8d",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Failed - Get Order - Get All 5 Items deleted',",
							"    endpoint: pm.environment.get('version')+\"/objorder\",",
							"    method: \"GET\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Passed - Get Order - Get All 5 Items deleted',",
							"    endpoint: pm.environment.get('version')+\"/objorder\",",
							"    method: \"GET\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var msg;",
							"var idEVN = Number(pm.environment.get(\"id_del_min\"));",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"    var count = json.data_del.length;",
							"    for(var i = 0; i<count;i++){",
							"        var id = Number(json.data_del[i].item.id);",
							"        if(!dataResponse.includes(\"error\") && id > idEVN){",
							"            msg.description=\"Get All 5 Items deleted successful\";",
							"            pm.environment.set(\"GTE\",json.data_del[4].item.updated_date);",
							"        }else{",
							"            msg = msgFailed;",
							"            msg.error = \"Get All 5 Items deleted not successful\";",
							"            msg.description=dataResponse;",
							"            break;",
							"        }",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "token",
						"value": "{{keyapi}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/objorder?keyapi={{keyapi}}&fields=id,obj_type,obj_id,source_account,updated_date,order_number&has_del=1&minDelID={{id_del_min}}&pItem=5",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"objorder"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "fields",
							"value": "id,obj_type,obj_id,source_account,updated_date,order_number"
						},
						{
							"key": "has_del",
							"value": "1"
						},
						{
							"key": "minDelID",
							"value": "{{id_del_min}}"
						},
						{
							"key": "pItem",
							"value": "5"
						},
						{
							"key": "bottom",
							"value": "1",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Order - Get All 5 Items deleted - ModifiedGTE",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d0559d8f-bb0c-4f48-aa7d-5a46eb1d0c9f",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7925c739-7b34-4be0-8157-01bd8887cf8d",
						"exec": [
							"var json = JSON.parse(responseBody);",
							"var msgFailed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Failed - Get Order - Get All 5 Items deleted - ModifiedGTE',",
							"    endpoint: pm.environment.get('version')+\"/objorder\",",
							"    method: \"GET\",",
							"    error: \"Has Error\",",
							"    status:\"200\",",
							"    description:\"\",",
							"};",
							"var msgPassed = {",
							"    collection:'API-ObjOder',",
							"    title: 'Passed - Get Order - Get All 5 Items deleted - ModifiedGTE',",
							"    endpoint: pm.environment.get('version')+\"/objorder\",",
							"    method: \"GET\",",
							"    error: \"No Error\",",
							"    status: \"200\",",
							"    description:\"\",",
							"};",
							"",
							"// Data response",
							"var dataResponse = pm.response.text();",
							"// Status code response",
							"var statusResponse = responseCode.code;",
							"var msg;",
							"var GTE = Number(pm.environment.get(\"GTE\"));",
							"if(statusResponse == 200){",
							"    msg = msgPassed;",
							"    msg.status = 200;",
							"    pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"    });",
							"    var count = json.data_del.length;",
							"    for(var i = 0; i<count;i++){",
							"        var updated_time = Number(json.data_del[i].item.updated_date);",
							"        if(!dataResponse.includes(\"error\") && updated_time >= GTE){",
							"            msg.description=\"Get Order - Get All 5 Items deleted - ModifiedGTE successful\";",
							"        }else{",
							"            msg = msgFailed;",
							"            msg.error = \"Get Order - Get All 5 Items deleted - ModifiedGTE not successful\";",
							"            msg.description=dataResponse;",
							"            break;",
							"        }",
							"    }",
							"}else  {",
							"    msg = msgFailed;",
							"    msg.status = statusResponse;",
							"    msg.error = \"status response failed\";",
							"    msg.description = dataResponse;",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"url_report\"),",
							"    method: 'POST',",
							"    header: {",
							"        'content-type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(msg)",
							"    }",
							"}, function (err, res) {",
							"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "token",
						"value": "{{keyapi}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/objorder?keyapi={{keyapi}}&has_del=1&pItem=5&modifiedGTE={{GTE}}&fields=id,obj_type,obj_id,source_account,updated_date,order_number",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"objorder"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "has_del",
							"value": "1"
						},
						{
							"key": "pItem",
							"value": "5"
						},
						{
							"key": "modifiedGTE",
							"value": "{{GTE}}"
						},
						{
							"key": "bottom",
							"value": "1",
							"disabled": true
						},
						{
							"key": "minDelID",
							"value": "",
							"disabled": true
						},
						{
							"key": "fields",
							"value": "id,obj_type,obj_id,source_account,updated_date,order_number"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Order - Get All Items - Clean Up",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d0559d8f-bb0c-4f48-aa7d-5a46eb1d0c9f",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7925c739-7b34-4be0-8157-01bd8887cf8d",
						"exec": [
							"// Clean up environment",
							"pm.environment.unset(\"idItem\");",
							"pm.environment.unset(\"updatedTime-7\");",
							"pm.environment.unset(\"id_1_item\");",
							"pm.environment.unset(\"updatedTimeNewest\");",
							"pm.environment.unset(\"id_all_order\");",
							"pm.environment.unset(\"idObjOrder\");",
							"pm.environment.unset(\"modifiedGTE_Search\");",
							"pm.environment.unset(\"idItem1\");",
							"pm.environment.unset(\"ids1\");",
							"pm.environment.unset(\"ids\");",
							"pm.environment.unset(\"id_del_min\");",
							"pm.environment.unset(\"GTE\");",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "token",
						"type": "text",
						"value": "{{keyapi}}"
					}
				],
				"url": {
					"raw": "https://{{server}}:{{port}}/{{version}}/objorder?keyapi={{keyapi}}&bottom=1&fields=id,obj_type,obj_id,source_account,updated_date,order_number",
					"protocol": "https",
					"host": [
						"{{server}}"
					],
					"port": "{{port}}",
					"path": [
						"{{version}}",
						"objorder"
					],
					"query": [
						{
							"key": "keyapi",
							"value": "{{keyapi}}"
						},
						{
							"key": "bottom",
							"value": "1"
						},
						{
							"key": "fields",
							"value": "id,obj_type,obj_id,source_account,updated_date,order_number"
						}
					]
				}
			},
			"response": []
		}
	]
}