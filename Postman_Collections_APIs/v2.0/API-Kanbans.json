{
	"info": {
		"_postman_id": "a278502c-23c7-410e-abbf-a8fe74d649dc",
		"name": "API - Kanbans Version 2.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create Kanbans",
			"item": [
				{
					"name": "RUN ALL SCRIPTS API - KANBANS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e1b744bb-acc2-4081-aac1-a4f8c9a6cfbb",
								"exec": [
									"// Use the CryptoJS",
									"var hash = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\")+\":LeftCoastLogic:\"+pm.environment.get(\"password\"))+pm.environment.get(\"appreg\")).toString();",
									"",
									"console.log(\"sig: \" + hash);",
									"postman.setEnvironmentVariable(\"sig\", hash);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "64ab487d-2eda-44c8-b027-39943e652ed9",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"console.log(responseBody);",
									"",
									"var keyapi = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\") + pm.environment.get(\"appreg\")) + json.tokenapi).toString();",
									"",
									"postman.setEnvironmentVariable(\"token\", json.tokenapi);",
									"postman.setEnvironmentVariable(\"keyapi\", keyapi);",
									"",
									"var msgFailed = {",
									"    collection:'API-Kanbans',",
									"    title: 'Test Version: '+pm.environment.get('version')+'\\nFailed - Pretest - Login',",
									"    endpoint: pm.environment.get('version')+\"/users/token.json\",",
									"    method: \"POST\",",
									"    error: \"Has Error\",",
									"    status:\"200\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection:'API-Kanbans',",
									"    title: 'Test Version: '+pm.environment.get('version')+'\\nPassed - Pretest - Login',",
									"    endpoint: pm.environment.get('version')+\"/users/token.json\",",
									"    method: \"POST\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"",
									"var statusResponse = responseCode.code;",
									"var msg ;",
									"if(statusResponse == 200){",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.description;",
									"    if(body==\"Flo\"){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{email}}\",\n\t\"alias\": \"{{alias}}\",\n\t\"sig\": \"{{sig}}\"\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users/token.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"token.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Collection Pre-Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f143c287-8361-4d2a-aa9c-815ea1c423e1",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection:'API-Kanbans',",
									"    title: 'Test Version: '+pm.environment.get('version')+'\\nFailed - Pretest - Create Collection',",
									"    endpoint: pm.environment.get('version')+\"/projects.json\",",
									"    method: \"POST\",",
									"    error: \"Has Error\",",
									"    status:\"200\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection:'API-Kanbans',",
									"    title: 'Test Version: '+pm.environment.get('version')+'\\nPassed - Pretest - Create Collection',",
									"    endpoint: pm.environment.get('version')+\"/projects.json\",",
									"    method: \"POST\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"",
									"var msg ;",
									"if(statusResponse == 200){",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    msg = msgPassed;",
									"    msg.status = statusResponse;",
									"    if(dataResponse.includes(\"error\")){",
									"        msg = msgFailed;",
									"        msg.description=dataResponse;",
									"        msg.error = \"Description response failed\";",
									"    }else{",
									"        msg = msgPassed;",
									"        var idProj = json.data[0].projects.id;",
									"        pm.environment.set(\"idProjectCreated\", idProj);",
									"        msg.description=\"Create new Collection has project_id: \"+idProj;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7b6f26db-5c33-4efb-9fad-b0be0d917b3e",
								"exec": [
									"var numberRandom = Math.floor(Math.random() * 10000000);",
									"postman.setEnvironmentVariable(\"nameCollection\",\"Collection_\"+numberRandom);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{keyapi}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"projects\": [\n        {\n            \"proj_name\": \"{{nameCollection}}\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/projects.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"projects.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Kanbans - Only input parameter project_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a3712e8-4267-41dd-b822-a139fc860c66",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Create Kanbans - Only input parameter project_id',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"POST\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Create Kanbans - Only input parameter project_id',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"POST\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"",
									"var msg ;",
									"if(statusResponse == 200){",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    if(!dataResponse.includes(\"error\")){",
									"        msg.error = \"Create Kanban with parameter 'project_id' successful\";",
									"        msg.description=dataResponse;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=dataResponse;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"kanbans\": [\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\":\"\",\n            \"color\":\"\",\n            \"order_number\":1,\n            \"archive_status\":1,\n            \"order_update_time\":1547534092.088,\n            \"show_done_todo\":1,\n            \"add_new_obj_type\":1,\n            \"sort_by_type\":1,\n            \"kanban_type\":0,\n            \"ref\":\"\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Kanbans - Only input parameter name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a3712e8-4267-41dd-b822-a139fc860c66",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Create Kanbans - Only input parameter name',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"POST\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Create Kanbans - Only input parameter name',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"POST\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"",
									"var msg ;",
									"if(statusResponse == 200){",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    if(!dataResponse.includes(\"error\")){",
									"        msg.description=\"Create Kanban, only input parameter name successful\";",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Create Kanban, only input parameter name not successful\";",
									"        msg.description=dataResponse;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4f7aaea3-1506-4175-b353-59c9062a0fdd",
								"exec": [
									"var numberRandom = Math.floor(Math.random()*10000000);",
									"postman.setEnvironmentVariable(\"nameCollection\",\"Collection_\"+numberRandom);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"kanbans\": [\n        {\n            \"project_id\": \"\",\n            \"name\":\"{{nameCollection}}\",\n            \"color\":\"\",\n            \"order_number\":1,\n            \"archive_status\":1,\n            \"order_update_time\":1547534092.088,\n            \"show_done_todo\":1,\n            \"add_new_obj_type\":1,\n            \"sort_by_type\":1,\n            \"kanban_type\":0,\n            \"ref\":\"\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Kanbans - Only input parameter color",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a3712e8-4267-41dd-b822-a139fc860c66",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Create Kanbans - Only input parameter color',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"POST\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Create Kanbans - Only input parameter color',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"POST\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"",
									"var msg ;",
									"if(statusResponse == 200){",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    if(!dataResponse.includes(\"error\")){",
									"        msg.description=\"Create Kanban, only input parameter color successful\";",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Create Kanban, only input parameter color not successful\";",
									"        msg.description=dataResponse;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"kanbans\": [\n        {\n            \"project_id\": \"\",\n            \"name\":\"\",\n            \"color\":\"#4986e7\",\n            \"order_number\":1,\n            \"archive_status\":1,\n            \"order_update_time\":1547534092.088,\n            \"show_done_todo\":1,\n            \"add_new_obj_type\":1,\n            \"sort_by_type\":1,\n            \"kanban_type\":0,\n            \"ref\":\"\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Kanbans - Input parameters project_id and Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a3712e8-4267-41dd-b822-a139fc860c66",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Create Kanbans - Input parameters project_id and Name',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"POST\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Create Kanbans - Input parameters project_id and Name',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"POST\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"",
									"var msg ;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    if(!dataResponse.includes(\"error\")){",
									"        msg.error = \"Allow create Kanban without parameter 'color'\";",
									"        msg.description=dataResponse;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Cannot create Kanban without parameter 'color'\";",
									"        msg.description=dataResponse;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9c0a6e83-eb4f-4130-9991-adb6067a5b02",
								"exec": [
									"var numberRandom = Math.floor(Math.random()*10000000);",
									"postman.setEnvironmentVariable(\"nameCollection\",\"Collection_\"+numberRandom);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"kanbans\": [\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\":\"\",\n            \"order_number\":1,\n            \"archive_status\":1,\n            \"order_update_time\":1547534092.088,\n            \"show_done_todo\":1,\n            \"add_new_obj_type\":1,\n            \"sort_by_type\":1,\n            \"kanban_type\":0,\n            \"ref\":\"\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Kanbans - Input parameters project_id and Color",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a3712e8-4267-41dd-b822-a139fc860c66",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Create Kanbans - Input parameters project_id and Color',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"POST\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Create Kanbans - Input parameters project_id and Color',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"POST\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"",
									"var msg ;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    if(!dataResponse.includes(\"error\")){",
									"        msg.error = \"Allow create Kanban without parameter 'name'\";",
									"        msg.description=dataResponse;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Cannot create Kanban without parameter 'name'\";",
									"        msg.description=dataResponse;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bb398dae-1a9f-4548-a236-65f6721cd6f9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"kanbans\": [\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"\",\n            \"color\":\"#4986e7\",\n            \"order_number\":1,\n            \"archive_status\":1,\n            \"order_update_time\":1547534092.088,\n            \"show_done_todo\":1,\n            \"add_new_obj_type\":1,\n            \"sort_by_type\":1,\n            \"kanban_type\":0,\n            \"ref\":\"\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Kanbans - Input parameters Name and Color",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a3712e8-4267-41dd-b822-a139fc860c66",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Create Kanbans - Input parameters Name and Color',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"POST\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Create Kanbans - Input parameters Name and Color',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"POST\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"var msg ;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    if(!dataResponse.includes(\"error\")){",
									"        msg.description = \"Create Kanban, only input parameter 'name' and 'color' successful\";",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Create Kanban, only input parameter 'name' and 'color' not successful\";",
									"        msg.description=dataResponse;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e5c0cfa6-61d1-4ef1-ae22-e2456857a308",
								"exec": [
									"var numberRandom = Math.floor(Math.random()*10000000);",
									"postman.setEnvironmentVariable(\"nameCollection\",\"Collection_\"+numberRandom);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"kanbans\": [\n        {\n            \"project_id\": \"\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\":\"#4986e7\",\n            \"order_number\":1,\n            \"archive_status\":1,\n            \"order_update_time\":1547534092.088,\n            \"show_done_todo\":1,\n            \"add_new_obj_type\":1,\n            \"sort_by_type\":1,\n            \"kanban_type\":0,\n            \"ref\":\"\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Kanbans - Input invalid parameter project_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a3712e8-4267-41dd-b822-a139fc860c66",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Create Kanbans - Input invalid parameter project_id',",
									"    endpoint: pm.environment.get('version')+\"/kanbans\",",
									"    method: \"POST\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Create Kanbans - Input invalid parameter project_id',",
									"    endpoint: pm.environment.get('version')+\"/kanbans\",",
									"    method: \"POST\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"",
									"var msg ;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    if(!dataResponse.includes(\"error\")){",
									"        msg.description = \"Create kanban with invalid parameter 'project_id' successful\";",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Create kanban with invalid parameter 'project_id' not successful\";",
									"        msg.description=dataResponse;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a8d3e205-8120-4350-acb1-0505faa8b0da",
								"exec": [
									"var numberRandom = Math.floor(Math.random()*10000000);",
									"postman.setEnvironmentVariable(\"nameCollection\",\"Collection_\"+numberRandom);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"kanbans\": [\n        {\n            \"project_id\": \"123321a\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\":\"#4986e7\",\n            \"order_number\":1,\n            \"archive_status\":1,\n            \"order_update_time\":1547534092.088,\n            \"show_done_todo\":1,\n            \"add_new_obj_type\":1,\n            \"sort_by_type\":1,\n            \"kanban_type\":0,\n            \"ref\":\"\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Kanbans - Input wrong parameter project_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a3712e8-4267-41dd-b822-a139fc860c66",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Create Kanbans - Input wrong parameter project_id',",
									"    endpoint: pm.environment.get('version')+\"/kanbans\",",
									"    method: \"POST\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Create Kanbans - Input wrong parameter project_id',",
									"    endpoint: pm.environment.get('version')+\"/kanbans\",",
									"    method: \"POST\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"",
									"var msg ;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    if(!dataResponse.includes(\"error\")){",
									"        msg.description = dataResponse;",
									"        msg.error = \"Allow create kanban with wrong parameter 'project_id'\";",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=dataResponse;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a8d3e205-8120-4350-acb1-0505faa8b0da",
								"exec": [
									"var numberRandom = Math.floor(Math.random()*10000000);",
									"postman.setEnvironmentVariable(\"nameCollection\",\"Collection_\"+numberRandom);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"kanbans\": [\n        {\n            \"project_id\": 121212,\n            \"name\": \"{{nameCollection}}\",\n            \"color\":\"#4986e7\",\n            \"order_number\":1,\n            \"archive_status\":1,\n            \"order_update_time\":1547534092.088,\n            \"show_done_todo\":1,\n            \"add_new_obj_type\":1,\n            \"sort_by_type\":1,\n            \"kanban_type\":0,\n            \"ref\":\"\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Kanbans - Input invalid parameter color",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a3712e8-4267-41dd-b822-a139fc860c66",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Create Kanbans - Input invalid parameter color',",
									"    endpoint: pm.environment.get('version')+\"/kanbans\",",
									"    method: \"POST\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Create Kanbans - Input invalid parameter color',",
									"    endpoint: pm.environment.get('version')+\"/kanbans\",",
									"    method: \"POST\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"",
									"var msg ;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    if(!dataResponse.includes(\"error\")){",
									"        msg.description = dataResponse;",
									"        msg.error = \"Allow create kanban with invalid parameter 'color'\";",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=dataResponse;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a8d3e205-8120-4350-acb1-0505faa8b0da",
								"exec": [
									"var numberRandom = Math.floor(Math.random()*10000000);",
									"postman.setEnvironmentVariable(\"nameCollection\",\"Collection_\"+numberRandom);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"kanbans\": [\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\":\"{{nameCollection}}\",\n            \"color\":123,\n            \"order_number\":1,\n            \"archive_status\":1,\n            \"order_update_time\":1547534092.088,\n            \"show_done_todo\":1,\n            \"add_new_obj_type\":1,\n            \"sort_by_type\":1,\n            \"kanban_type\":0,\n            \"ref\":\"\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Kanbans - Input invalid parameter name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a3712e8-4267-41dd-b822-a139fc860c66",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Create Kanbans - Input invalid parameter name',",
									"    endpoint: pm.environment.get('version')+\"/kanbans\",",
									"    method: \"POST\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Create Kanbans - Input invalid parameter name',",
									"    endpoint: pm.environment.get('version')+\"/kanbans\",",
									"    method: \"POST\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"",
									"var msg ;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    if(!dataResponse.includes(\"error\")){",
									"        msg.description = dataResponse;",
									"        msg.error = \"Allow create kanban with invalid parameter 'name'\";",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=dataResponse;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a8d3e205-8120-4350-acb1-0505faa8b0da",
								"exec": [
									"var numberRandom = Math.floor(Math.random()*10000000);",
									"postman.setEnvironmentVariable(\"nameCollection\",\"Collection_\"+numberRandom);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"kanbans\": [\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\":789456123,\n            \"color\":\"#4986e7\",\n            \"order_number\":1,\n            \"archive_status\":1,\n            \"order_update_time\":1547534092.088,\n            \"show_done_todo\":1,\n            \"add_new_obj_type\":1,\n            \"sort_by_type\":1,\n            \"kanban_type\":0,\n            \"ref\":\"\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Kanbans - None parameter project_id in body",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a3712e8-4267-41dd-b822-a139fc860c66",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Create Kanbans - None parameter project_id in body',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"POST\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Create Kanbans - None parameter project_id in body',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"POST\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"",
									"var msg ;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    if(!dataResponse.includes(\"error\")){",
									"        msg.description = \"Create kanban with none parameter 'project_id' successful\";",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Create kanban with none parameter 'project_id' not successful\";",
									"        msg.description=dataResponse;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a8d3e205-8120-4350-acb1-0505faa8b0da",
								"exec": [
									"var numberRandom = Math.floor(Math.random()*10000000);",
									"postman.setEnvironmentVariable(\"nameCollection\",\"Collection_\"+numberRandom);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"kanbans\": [\n        {\n            \"name\":\"{{nameCollection}}\",\n            \"color\":\"#4986e7\",\n            \"order_number\":1,\n            \"archive_status\":1,\n            \"order_update_time\":1547534092.088,\n            \"show_done_todo\":1,\n            \"add_new_obj_type\":1,\n            \"sort_by_type\":1,\n            \"kanban_type\":0,\n            \"ref\":\"\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Kanbans - None parameter name in body",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a3712e8-4267-41dd-b822-a139fc860c66",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Create Kanbans - None parameter name in body',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"POST\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Create Kanbans - None parameter name in body',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"POST\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"",
									"var msg ;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    if(!dataResponse.includes(\"error\")){",
									"        msg.description = dataResponse;",
									"        msg.error = \"Allow create kanban without parameter 'name'\";",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=dataResponse;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a8d3e205-8120-4350-acb1-0505faa8b0da",
								"exec": [
									"var numberRandom = Math.floor(Math.random()*10000000);",
									"postman.setEnvironmentVariable(\"nameCollection\",\"Collection_\"+numberRandom);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"kanbans\": [\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\":\"#4986e7\",\n            \"order_number\":1,\n            \"archive_status\":1,\n            \"order_update_time\":1547534092.088,\n            \"show_done_todo\":1,\n            \"add_new_obj_type\":1,\n            \"sort_by_type\":1,\n            \"kanban_type\":0,\n            \"ref\":\"\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Kanbans - None parameter color in body",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a3712e8-4267-41dd-b822-a139fc860c66",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Create Kanbans - None parameter color in body',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"POST\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Create Kanbans - None parameter color in body',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"POST\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"",
									"var msg ;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    if(!dataResponse.includes(\"error\")){",
									"        msg.description = dataResponse;",
									"        msg.error = \"Allow create kanban without parameter 'color'\";",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=dataResponse;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a8d3e205-8120-4350-acb1-0505faa8b0da",
								"exec": [
									"var numberRandom = Math.floor(Math.random()*10000000);",
									"postman.setEnvironmentVariable(\"nameCollection\",\"Collection_\"+numberRandom);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"kanbans\": [\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\":\"{{nameCollection}}\",\n            \"order_number\":1,\n            \"archive_status\":1,\n            \"order_update_time\":1547534092.088,\n            \"show_done_todo\":1,\n            \"add_new_obj_type\":1,\n            \"sort_by_type\":1,\n            \"kanban_type\":0,\n            \"ref\":\"\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Kanbans - None parameters color and project_id in body",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a3712e8-4267-41dd-b822-a139fc860c66",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Create Kanbans - None parameters color and project_id in body',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"POST\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Create Kanbans - None parameters color and project_id in body',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"POST\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"",
									"var msg ;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    if(!dataResponse.includes(\"error\")){",
									"        msg.description = \"Create kanban with none parameter 'project_id' and 'color' successful\";",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Create kanban with invalid parameter 'project_id' and 'color' not successful\";",
									"        msg.description=dataResponse;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a8d3e205-8120-4350-acb1-0505faa8b0da",
								"exec": [
									"var numberRandom = Math.floor(Math.random()*10000000);",
									"postman.setEnvironmentVariable(\"nameCollection\",\"Collection_\"+numberRandom);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"kanbans\": [\n        {\n            \"name\":\"{{nameCollection}}\",\n            \"order_number\":1,\n            \"archive_status\":1,\n            \"order_update_time\":1547534092.088,\n            \"show_done_todo\":1,\n            \"add_new_obj_type\":1,\n            \"sort_by_type\":1,\n            \"kanban_type\":0,\n            \"ref\":\"\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Kanbans - None parameters name and project_id in body",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a3712e8-4267-41dd-b822-a139fc860c66",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Create Kanbans - None parameters name and project_id in body',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"POST\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Create Kanbans - None parameters name and project_id in body',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"POST\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"",
									"var msg ;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    if(!dataResponse.includes(\"error\")){",
									"        msg.description = \"Create kanban with none parameter 'project_id' and 'name' successful\";",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Create kanban with invalid parameter 'project_id' and 'name' not successful\";",
									"        msg.description=dataResponse;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a8d3e205-8120-4350-acb1-0505faa8b0da",
								"exec": [
									"var numberRandom = Math.floor(Math.random()*10000000);",
									"postman.setEnvironmentVariable(\"nameCollection\",\"Collection_\"+numberRandom);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"kanbans\": [\n        {\n            \"color\":\"#4986e7\",\n            \"order_number\":1,\n            \"archive_status\":1,\n            \"order_update_time\":1547534092.088,\n            \"show_done_todo\":1,\n            \"add_new_obj_type\":1,\n            \"sort_by_type\":1,\n            \"kanban_type\":0,\n            \"ref\":\"\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Kanbans - None parameters color and name in body",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a3712e8-4267-41dd-b822-a139fc860c66",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Create Kanbans - None parameters color and name in body',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"POST\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Create Kanbans - None parameters color and name in body',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"POST\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"",
									"var msg ;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    if(!dataResponse.includes(\"error\")){",
									"        msg.description = \"Create kanban with none parameter 'name' and 'color' successful\";",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Create kanban with invalid parameter 'name' and 'color' not successful\";",
									"        msg.description=dataResponse;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a8d3e205-8120-4350-acb1-0505faa8b0da",
								"exec": [
									"var numberRandom = Math.floor(Math.random()*10000000);",
									"postman.setEnvironmentVariable(\"nameCollection\",\"Collection_\"+numberRandom);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"kanbans\": [\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"order_number\":1,\n            \"archive_status\":1,\n            \"order_update_time\":1547534092.088,\n            \"show_done_todo\":1,\n            \"add_new_obj_type\":1,\n            \"sort_by_type\":1,\n            \"kanban_type\":0,\n            \"ref\":\"\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Kanbans - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a3712e8-4267-41dd-b822-a139fc860c66",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Create Kanbans - Success',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"POST\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Create Kanbans - Success',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"POST\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"// Get project_id from environment",
									"var idProj = pm.environment.get(\"idProjectCreated\");",
									"var msg ;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    if(dataResponse.includes(idProj)){",
									"        msg.description = \"Create New Kanban Success!\";",
									"        msg.error = \"No Error\";",
									"        var idKanban = pm.environment.set(\"id_Kanban\",json.data[0].kanban.id);",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=dataResponse;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a8d3e205-8120-4350-acb1-0505faa8b0da",
								"exec": [
									"var numberRandom = Math.floor(Math.random()*10000000);",
									"postman.setEnvironmentVariable(\"nameCollection\",\"Collection_\"+numberRandom);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"kanbans\": [\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\":\"{{nameCollection}}\",\n            \"color\":\"#4986e7\",\n            \"order_number\":1,\n            \"archive_status\":1,\n            \"order_update_time\":1547534092.088,\n            \"show_done_todo\":1,\n            \"add_new_obj_type\":1,\n            \"sort_by_type\":1,\n            \"kanban_type\":0,\n            \"ref\":\"\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Kanbans - Create Kanban with invalid value inputted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a3712e8-4267-41dd-b822-a139fc860c66",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Create Kanbans - Create Kanban with invalid value inputted',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"POST\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Create Kanbans - Create Kanban with invalid value inputted',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"POST\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"// Get project_id from environment",
									"var idProj = pm.environment.get(\"idProjectCreated\");",
									"var msg ;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    if(dataResponse.includes(\"data_error\")){",
									"        msg.description=dataResponse;",
									"        msg.error = \"Cannot create new Kanban with invalid value inputted!\";",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Create new Kanban with invalid value inputted success\";",
									"        msg.description=dataResponse;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a8d3e205-8120-4350-acb1-0505faa8b0da",
								"exec": [
									"var numberRandom = Math.floor(Math.random()*10000000);",
									"postman.setEnvironmentVariable(\"nameCollection\",\"Collection_\"+numberRandom);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"kanbans\": [\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\":\"{{nameCollection}}\",\n            \"color\":\"12automationqcflo@gmail.automationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.com\",\n            \"order_number\":1,\n            \"archive_status\":1,\n            \"order_update_time\":1547534092.088,\n            \"show_done_todo\":1,\n            \"add_new_obj_type\":1,\n            \"sort_by_type\":1,\n            \"kanban_type\":0,\n            \"ref\":\"\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Kanbans - Create 50 Kanbans",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a3712e8-4267-41dd-b822-a139fc860c66",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Create 50 Kanbans',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"POST\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Create 50 Kanbans',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"POST\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"// Get project_id from environment",
									"var idProj = pm.environment.get(\"idProjectCreated\");",
									"var msg ;",
									"var array =[];",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    var count = json.data.length;",
									"    if(count === 50){",
									"        for(var i=0; i<count; i++){",
									"             array[i] = json.data[i].kanban.id;",
									"        }",
									"        pm.environment.set(\"50idKanbans[]\",array);",
									"        msg.description=\"Create 50 kanbans success\";",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.status = count;",
									"        msg.description = \"Create 50 kanbans failed\";",
									"        msg.error = \"Error\";",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a8d3e205-8120-4350-acb1-0505faa8b0da",
								"exec": [
									"var numberRandom = Math.floor(Math.random()*10000000);",
									"postman.setEnvironmentVariable(\"nameCollection\",\"Collection_\"+numberRandom);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"kanbans\": [\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        },\n        {\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"name\": \"{{nameCollection}}\",\n            \"color\": \"#4986e7\",\n            \"order_number\": 1,\n            \"archive_status\": 1,\n            \"order_update_time\": 1547534092.088,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 1,\n            \"sort_by_type\": 1,\n            \"kanban_type\": 0,\n            \"ref\": \"\"\n        }\n    ]\n}\n"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get List Kanban",
			"item": [
				{
					"name": "Get List Kanban  - Get a kanban created.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "913a607c-5221-467d-b6bf-84bd258fa9a1",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Get List Kanban  - Get a kanban created.',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"GET\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Get List Kanban  - Get a kanban created.',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"GET\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"// Get id Kanban from environment",
									"var idKanban = pm.environment.get(\"id_Kanban\");",
									"var msg ;",
									"",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    if(dataResponse.includes(idKanban)){",
									"        msg.description = \"Get a kanban created successful\";",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.description = \"Get a kanban created not successful\";",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{keyapi}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban?ids={{id_Kanban}}",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban"
							],
							"query": [
								{
									"key": "ids",
									"value": "{{id_Kanban}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get List Kanban  - Get all Kanbans created",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "913a607c-5221-467d-b6bf-84bd258fa9a1",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Get List Kanban  -  Get all Kanbans created',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"GET\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Get List Kanban  -  Get all Kanbans created',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"GET\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"",
									"var msg ;",
									"var array = [];",
									"var count = json.data.length;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    if(!dataResponse.includes(\"error\")){",
									"        msg.description=\"Get all Kanbans created successful\";",
									"        var count = json.data.length;",
									"        var id = [];",
									"        for(var i = 0; i < count; i++){",
									"            id[i] = json.data[i].kanban.id;",
									"        }",
									"        // Set all and id trash in environment.",
									"        pm.environment.set(\"allIDKanbans[]\",id);",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Get all Kanbans created not successful\";",
									"        msg.description=dataResponse;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"status response failed\";",
									"    msg.description = dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban?has_del=0",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban"
							],
							"query": [
								{
									"key": "has_del",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get List Kanban  - Get all Kanbans - pItem = 20",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ef00b9e8-561e-4378-8785-3a6624db0e41",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9196f733-d856-4f2e-be9e-6841a9d8bd00",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Get List Kanban  - Get all Kanbans - pItem = 20',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"GET\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Get List Kanban  - Get all Kanbans - pItem = 20',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"GET\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"var msg ;",
									"",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    var count = json.data.length;",
									"    if(count === 20){",
									"        msg.description=\"Show 20 Kanbans in 1 page\";",
									"        pm.environment.set(\"ModifiedGTE\",json.data[19].kanban.updated_date);",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.description = \"Not show 20 Kanbans in 1 page\";",
									"        msg.error = \"Error\";",
									"    }",
									"    ",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{keyapi}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban?minID=&pItem=20&fields=project_id,name,color,updated_date,created_date,id",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban"
							],
							"query": [
								{
									"key": "minID",
									"value": ""
								},
								{
									"key": "modifiedGTE",
									"value": "",
									"disabled": true
								},
								{
									"key": "ids",
									"value": "",
									"disabled": true
								},
								{
									"key": "pItem",
									"value": "20"
								},
								{
									"key": "fields",
									"value": "project_id,name,color,updated_date,created_date,id"
								},
								{
									"key": "has_del",
									"value": "",
									"disabled": true
								},
								{
									"key": "minDelID",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get List Kanban  - Get Change Sync Kanbans with modifiedGTE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ef00b9e8-561e-4378-8785-3a6624db0e41",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9196f733-d856-4f2e-be9e-6841a9d8bd00",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Get List Kanban  - Get Change Sync Kanbans with modifiedGTE',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"GET\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Get List Kanban  - Get Change Sync Kanbans with modifiedGTE',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"GET\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"var msg ;",
									"",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"var updatedtime = pm.environment.get(\"ModifiedGTE\");",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    var count = json.data.length;",
									"    if(count > 0){",
									"        if(updatedtime >= json.data[0].kanban.updated_date){",
									"            msg.description=\"Get Change Sync Kanbans with modifiedGTE successful\";",
									"        }else{",
									"            msg = msgFailed;",
									"            msg.description = \"Get Change Sync Kanbans with modifiedGTE not successful\";",
									"            msg.error = \"Error\";",
									"        }",
									"    }else{",
									"        msg.description=dataResponse;",
									"        msg.error = \"Response null data\";",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{keyapi}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban?modifiedGTE={{ModifiedGTE}}&has_del=1",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban"
							],
							"query": [
								{
									"key": "minID",
									"value": "",
									"disabled": true
								},
								{
									"key": "modifiedGTE",
									"value": "{{ModifiedGTE}}"
								},
								{
									"key": "ids",
									"value": "",
									"disabled": true
								},
								{
									"key": "pItem",
									"value": "20",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "project_id,name,color,updated_date,created_date,id",
									"disabled": true
								},
								{
									"key": "has_del",
									"value": "1"
								},
								{
									"key": "minDelID",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update Kanbans",
			"item": [
				{
					"name": "Update Kanbans - Update invalid id Kanban",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e4721af0-0055-45b4-afd6-a39ab323c08c",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Update Kanbans - Update invalid id Kanban',",
									"    endpoint: pm.environment.get('version')+\"/kanban/update\",",
									"    method: \"PUT\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Update Kanbans - Update invalid id Kanban',",
									"    endpoint: pm.environment.get('version')+\"/kanban/update\",",
									"    method: \"PUT\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"// Get project_id from environment",
									"var idKanban = pm.environment.get(\"id_Kanban\");",
									"var msg ;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    if(dataResponse.includes(\"error\")){",
									"        msg.description = dataResponse;",
									"        msg.error = \"Update invalid id Kanban\";",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=dataResponse;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"kanbans\": [\n        {\n            \"id\": 123,\n            \"name\": \"ko 1\",\n            \"updated_date\": 1550653239.698,\n            \"created_date\": 1550653239.698,\n            \"project_id\": 34164,\n            \"color\": \"\",\n            \"order_number\": 7,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        }\n    ]\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban/update",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Kanbans - null project_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6cea0858-67e5-49df-bc95-ad1255a349f8",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Update Kanbans - null project_id',",
									"    endpoint: pm.environment.get('version')+\"/kanban/update\",",
									"    method: \"PUT\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Update Kanbans - null project_id',",
									"    endpoint: pm.environment.get('version')+\"/kanban/update\",",
									"    method: \"PUT\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"",
									"var msg ;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    if(dataResponse.includes(\"error\")){",
									"        msg.description = dataResponse;",
									"        msg.error = \"Update Kanban with null 'project_id'\"",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=dataResponse;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"kanbans\": [\n        {\n            \"id\":\"{{id_Kanban}}\",\n            \"name\": \"ko 1\",\n            \"updated_date\": 1550653239.698,\n            \"created_date\": 1550653239.698,\n            \"project_id\": null,\n            \"color\": \"\",\n            \"order_number\": 7,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        }\n    ]\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban/update",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Kanbans - invalid project_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a80c8cd4-633b-4a25-9ffa-165a367d78f8",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Update Kanbans - invalid project_id',",
									"    endpoint: pm.environment.get('version')+\"/kanban/update\",",
									"    method: \"PUT\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Update Kanbans - invalid project_id',",
									"    endpoint: pm.environment.get('version')+\"/kanban/update\",",
									"    method: \"PUT\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"",
									"var msg ;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    if(!dataResponse.includes(\"error\")){",
									"        msg.description = \"Update Kanban with invalid 'project_id' successful\";",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Update Kanban with invalid 'project_id' not successful\";",
									"        msg.description=dataResponse;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"kanbans\": [\n        {\n            \"id\": \"{{id_Kanban}}\",\n            \"name\": \"Update Kanban\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"123a\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        }\n    ]\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban/update",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Kanbans - Update Kanban with invalid value inputted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a80c8cd4-633b-4a25-9ffa-165a367d78f8",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Update Kanbans - Update Kanban with invalid value inputted',",
									"    endpoint: pm.environment.get('version')+\"/kanban/update\",",
									"    method: \"PUT\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Update Kanbans - Update Kanban with invalid value inputted',",
									"    endpoint: pm.environment.get('version')+\"/kanban/update\",",
									"    method: \"PUT\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"",
									"var msg ;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    if(dataResponse.includes(\"data_error\")){",
									"        msg.error = \"Cannot update Kanban with invalid value inputted\";",
									"        msg.description = dataResponse;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Allow to update Kanban with invalid value inputted\";",
									"        msg.description=dataResponse;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"kanbans\": [\n        {\n            \"id\": \"{{id_Kanban}}\",\n            \"name\": \"Update Kanban\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"#12automationqcflo@gmail.automationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.comautomationqcflo@gmail.com\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        }\n    ]\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban/update",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Kanbans - wrong project_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a80c8cd4-633b-4a25-9ffa-165a367d78f8",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Update Kanbans - wrong project_id',",
									"    endpoint: pm.environment.get('version')+\"/kanban/update\",",
									"    method: \"PUT\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Update Kanbans - wrong project_id',",
									"    endpoint: pm.environment.get('version')+\"/kanban/update\",",
									"    method: \"PUT\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"",
									"var msg ;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    if(!dataResponse.includes(\"error\")){",
									"        msg.description =\"Update Kanban with wrong 'project_id' successful\";",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Update Kanban with wrong 'project_id' not successful\";",
									"        msg.description=dataResponse;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"kanbans\": [\n        {\n            \"id\": \"{{id_Kanban}}\",\n            \"name\": \"Update Kanban\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": 1892099880,\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        }\n    ]\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban/update",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Kanbans - Update valid id Kanban",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a80c8cd4-633b-4a25-9ffa-165a367d78f8",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Update Kanbans - Update valid id Kanban',",
									"    endpoint: pm.environment.get('version')+\"/kanban/update\",",
									"    method: \"PUT\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Update Kanbans - Update valid id Kanban',",
									"    endpoint: pm.environment.get('version')+\"/kanban/update\",",
									"    method: \"PUT\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"// Get project_id from environment",
									"var idKanban = pm.environment.get(\"id_Kanban\");",
									"var msg ;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    if(dataResponse.includes(idKanban)){",
									"        msg.description = \"Update Kanban successful\";",
									"        var modifiedGTE = json.data[0].kanban.updated_date;",
									"        pm.environment.set(\"modifiedGTE\",modifiedGTE);",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Update Kanban not successful\";",
									"        msg.description=dataResponse;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"kanbans\": [\n        {\n            \"id\": \"{{id_Kanban}}\",\n            \"name\": \"Update Kanban\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        }\n    ]\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban/update",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get List Kanban  - Get Change - a Kanban updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "913a607c-5221-467d-b6bf-84bd258fa9a1",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Get List Kanban  - Get Change - a Kanban updated',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"GET\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Get List Kanban  - Get Change - a Kanban updated',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"GET\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"",
									"var msg ;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    if(dataResponse.includes(pm.environment.get(\"id_Kanban\"))){",
									"        msg.description = \"Get a Kanban updated successful\";",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Get a Kanban updated not successful\";",
									"        msg.description=dataResponse;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{keyapi}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban?modifiedGTE={{modifiedGTE}}",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban"
							],
							"query": [
								{
									"key": "modifiedGTE",
									"value": "{{modifiedGTE}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Kanbans - Update 50 kanbans created",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a80c8cd4-633b-4a25-9ffa-165a367d78f8",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Update Kanbans - Update 50 kanbans created',",
									"    endpoint: pm.environment.get('version')+\"/kanban/update\",",
									"    method: \"PUT\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Update Kanbans - Update 50 kanbans created',",
									"    endpoint: pm.environment.get('version')+\"/kanban/update\",",
									"    method: \"PUT\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"// Get project_id from environment",
									"var count = json.data.length;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    if(count>0){",
									"        for(var i = 0; i < count; i++){",
									"            var KanbanID = parseInt(pm.environment.get(\"kanbanid-\"+i)); // convernt string to int",
									"            var idKanban = json.data[i].kanban.id; // int",
									"            if(KanbanID === idKanban){",
									"                msg.description = \"Update 50 Kanbans created successful\";",
									"                pm.environment.set(\"modifiedGTE-0\",json.data[0].kanban.updated_date);",
									"            }else{",
									"                msg = msgFailed;",
									"                msg.error = \"Description response failed\";",
									"                msg.description = \"Update 50 Kanbans created not successful\";",
									"                break;",
									"            }",
									"        }",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Return null Data\";",
									"        msg.description=dataResponse;",
									"    }",
									"}else{",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "94d4287c-04b9-4419-b054-5f2b80f0cc7c",
								"exec": [
									"var Array_50idKanbans = pm.environment.get(\"50idKanbans[]\");",
									"console.log(Array_50idKanbans);",
									"var count = Array_50idKanbans.length;",
									"// convert Array to String",
									"var idKanbans = Array_50idKanbans.toString();",
									"console.log(count);",
									"for(var i = 0; i<count; i++){",
									"    var listIDKanban = idKanbans.split(\",\")[i];",
									"    pm.environment.set(\"kanbanid-\"+i,listIDKanban);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"kanbans\": [\n        {\n            \"id\": \"{{kanbanid-0}}\",\n            \"name\": \"Update Kanban 0\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-1}}\",\n            \"name\": \"Update Kanban 1\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-2}}\",\n            \"name\": \"Update Kanban 2\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-3}}\",\n            \"name\": \"Update Kanban 3\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-4}}\",\n            \"name\": \"Update Kanban 4\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-5}}\",\n            \"name\": \"Update Kanban 5\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-6}}\",\n            \"name\": \"Update Kanban 6\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-7}}\",\n            \"name\": \"Update Kanban 7\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        }\n        ,\n        {\n            \"id\": \"{{kanbanid-8}}\",\n            \"name\": \"Update Kanban 8\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-9}}\",\n            \"name\": \"Update Kanban 9\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-10}}\",\n            \"name\": \"Update Kanban 10\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-11}}\",\n            \"name\": \"Update Kanban 11\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-12}}\",\n            \"name\": \"Update Kanban 12\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-13}}\",\n            \"name\": \"Update Kanban 13\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-14}}\",\n            \"name\": \"Update Kanban 14\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-15}}\",\n            \"name\": \"Update Kanban 15\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-16}}\",\n            \"name\": \"Update Kanban 16\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-17}}\",\n            \"name\": \"Update Kanban 17\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-18}}\",\n            \"name\": \"Update Kanban 18\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-19}}\",\n            \"name\": \"Update Kanban 19\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-20}}\",\n            \"name\": \"Update Kanban 20\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-21}}\",\n            \"name\": \"Update Kanban 21\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-22}}\",\n            \"name\": \"Update Kanban 22\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-23}}\",\n            \"name\": \"Update Kanban 23\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-24}}\",\n            \"name\": \"Update Kanban 24\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-25}}\",\n            \"name\": \"Update Kanban 25\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-26}}\",\n            \"name\": \"Update Kanban 26\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-27}}\",\n            \"name\": \"Update Kanban 27\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-28}}\",\n            \"name\": \"Update Kanban 28\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-29}}\",\n            \"name\": \"Update Kanban 29\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-30}}\",\n            \"name\": \"Update Kanban 30\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-31}}\",\n            \"name\": \"Update Kanban 31\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-32}}\",\n            \"name\": \"Update Kanban 32\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-33}}\",\n            \"name\": \"Update Kanban 33\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-34}}\",\n            \"name\": \"Update Kanban 34\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-35}}\",\n            \"name\": \"Update Kanban 35\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-36}}\",\n            \"name\": \"Update Kanban 36\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-37}}\",\n            \"name\": \"Update Kanban 37\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-38}}\",\n            \"name\": \"Update Kanban 38\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-39}}\",\n            \"name\": \"Update Kanban 39\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-40}}\",\n            \"name\": \"Update Kanban 40\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-41}}\",\n            \"name\": \"Update Kanban 41\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-42}}\",\n            \"name\": \"Update Kanban 42\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-43}}\",\n            \"name\": \"Update Kanban 43\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-44}}\",\n            \"name\": \"Update Kanban 44\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-45}}\",\n            \"name\": \"Update Kanban 45\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-46}}\",\n            \"name\": \"Update Kanban 46\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-47}}\",\n            \"name\": \"Update Kanban 47\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-48}}\",\n            \"name\": \"Update Kanban 48\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        },\n        {\n            \"id\": \"{{kanbanid-49}}\",\n            \"name\": \"Update Kanban 49\",\n            \"created_date\": 1550653239.696,\n            \"project_id\": \"{{idProjectCreated}}\",\n            \"color\": \"\",\n            \"order_number\": 8,\n            \"archive_status\": 0,\n            \"order_kbitem\": \"\",\n            \"order_update_time\": 0,\n            \"show_done_todo\": 1,\n            \"add_new_obj_type\": 0,\n            \"sort_by_type\": 0,\n            \"archived_time\": 0,\n            \"kanban_type\": 0\n        }\n        \n    ]\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban/update",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get List Kanban  - Get Change - Show 50 Kanbans updated",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ef00b9e8-561e-4378-8785-3a6624db0e41",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9196f733-d856-4f2e-be9e-6841a9d8bd00",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Get List Kanban  - Get Change - Show 50 Kanbans updated',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"GET\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Get List Kanban  - Get Change - Show 50 Kanbans updated',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"GET\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"var msg ;",
									"",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    var count = json.data.length;",
									"    if(count>0){",
									"        for(var i = 0; i < count; i++){",
									"            var KanbanID = parseInt(pm.environment.get(\"kanbanid-\"+i)); // convernt string to int",
									"            var idKanban = json.data[i].kanban.id; // int",
									"            if(KanbanID === idKanban){",
									"                msg.description = \"GET 50 Kanbans updated successful\";",
									"            }else{",
									"                msg = msgFailed;",
									"                msg.error = \"Description response failed\";",
									"                msg.description = \"GET 50 Kanbans updated not successful\";",
									"                break;",
									"            }",
									"        }",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Return null Data\";",
									"        msg.description=dataResponse;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban?minID=&modifiedGTE={{modifiedGTE-0}}&fields=project_id,name,color,updated_date,created_date,id",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban"
							],
							"query": [
								{
									"key": "minID",
									"value": ""
								},
								{
									"key": "modifiedGTE",
									"value": "{{modifiedGTE-0}}"
								},
								{
									"key": "ids",
									"value": "",
									"disabled": true
								},
								{
									"key": "pItem",
									"value": "20",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "project_id,name,color,updated_date,created_date,id"
								},
								{
									"key": "has_del",
									"value": "",
									"disabled": true
								},
								{
									"key": "minDelID",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get List Kanban  - Get Change - 20 Kanbans updated in 1 page",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ef00b9e8-561e-4378-8785-3a6624db0e41",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9196f733-d856-4f2e-be9e-6841a9d8bd00",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Get List Kanban  - Get Change - 20 Kanbans updated in 1 page',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"GET\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Get List Kanban  - Get Change - 20 Kanbans updated in 1 page',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"GET\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"var msg ;",
									"",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    var count = json.data.length;",
									"    if(count === 20){",
									"        msg.description=\"GET 20 Kanbans updated successful\";",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description = \"GET 20 Kanbans updated not successful\";",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban?minID=&modifiedGTE={{modifiedGTE-0}}&pItem=20&fields=project_id,name,color,updated_date,created_date,id",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban"
							],
							"query": [
								{
									"key": "minID",
									"value": ""
								},
								{
									"key": "modifiedGTE",
									"value": "{{modifiedGTE-0}}"
								},
								{
									"key": "ids",
									"value": "",
									"disabled": true
								},
								{
									"key": "pItem",
									"value": "20"
								},
								{
									"key": "fields",
									"value": "project_id,name,color,updated_date,created_date,id"
								},
								{
									"key": "has_del",
									"value": "",
									"disabled": true
								},
								{
									"key": "minDelID",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Kanbans - Update sort order 2 Kanbans",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52266027-1fc7-4b26-9351-e454f5827d4b",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Update Kanbans - Update sort order 2 Kanbans',",
									"    endpoint: pm.environment.get('version')+\"/kanban/update\",",
									"    method: \"PUT\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Update Kanbans - Update sort order 2 Kanbans',",
									"    endpoint: pm.environment.get('version')+\"/kanban/update\",",
									"    method: \"PUT\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"var msg ;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    // Get project_id from environment",
									"    var idKanban8 = pm.environment.get(\"kanbanid-8\");",
									"    var idKanban9 = pm.environment.get(\"kanbanid-9\");",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    if(dataResponse.includes(idKanban8) && dataResponse.includes(idKanban9)){",
									"        msg.description = \"Update sort order 2 Kanbans successful\";",
									"        pm.environment.set(\"modifiedGTE-Order\",json.data[0].kanban.updated_date);",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Update sort order 2 Kanbans not successful\";",
									"        msg.description=dataResponse;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "token",
								"value": "{{keyapi}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"name\":\"my kanban 2\",\n        \"project_id\":\"{{idProjectCreated}}\",\n        \"id\": \"{{kanbanid-8}}\",\n        \"order_number\": 2\n    },\n    {\n        \"name\":\"my kanban 3\",\n        \"project_id\":\"{{idProjectCreated}}\",\n        \"id\": \"{{kanbanid-9}}\",\n        \"order_number\": 3\n    }\n]"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban/update",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get List Kanban - Get Change - 2 Kanbans update order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ef00b9e8-561e-4378-8785-3a6624db0e41",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9196f733-d856-4f2e-be9e-6841a9d8bd00",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Get List Kanban - Get Change - 2 Kanbans update order',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"GET\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Get List Kanban - Get Change - 2 Kanbans update order',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"GET\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"// Get project_id from environment",
									"var idKanban8 = pm.environment.get(\"kanbanid-8\");",
									"var idKanban9 = pm.environment.get(\"kanbanid-9\");",
									"",
									"var msg ;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    idkanban8 = json.data[0].kanban.id;",
									"    idkanban9 = json.data[1].kanban.id;",
									"    order1 = json.data[0].kanban.order_number;",
									"    order2 = json.data[1].kanban.order_number;",
									"    if(idKanban8 == idkanban8 && idKanban9 == idkanban9 && order1 == 2 && order2 == 3){",
									"        msg.description = \"Get order 2 Kanbans successful.\";",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=dataResponse;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban?modifiedGTE={{modifiedGTE-Order}}",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban"
							],
							"query": [
								{
									"key": "minID",
									"value": "",
									"disabled": true
								},
								{
									"key": "modifiedGTE",
									"value": "{{modifiedGTE-Order}}"
								},
								{
									"key": "ids",
									"value": "",
									"disabled": true
								},
								{
									"key": "pItem",
									"value": "20",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "project_id,name,color,updated_date,created_date,id",
									"disabled": true
								},
								{
									"key": "has_del",
									"value": "",
									"disabled": true
								},
								{
									"key": "minDelID",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete Kanbans",
			"item": [
				{
					"name": "Delete Kanbans - Delete invalid id Kanban",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3aedb788-bb61-4502-891d-f97f55055e32",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Delete Kanbans - Delete invalid id Kanban',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"DELETE\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Delete Kanbans - Delete invalid id Kanban',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"DELETE\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"var msg ;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    if(dataResponse.includes(\"error\")){",
									"        msg = msgPassed;",
									"        msg.description = \"Cannot delete invalid id Kanban\";",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Delete invalid id Kanban successful\";",
									"        msg.description = dataResponse;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description= \"Not reponse status code 200\";",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban/123",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban",
								"123"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Kanbans - Delete a Kanban",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9190f34d-d9e6-4913-a45d-4c461c6bb9bb",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Delete Kanbans - Delete a Kanban',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"DELETE\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Delete Kanbans - Delete a Kanban',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"DELETE\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    // Get id Kanban from environment",
									"    var idKanban = pm.environment.get(\"id_Kanban\");",
									"    var msg ;",
									"    if(dataResponse.includes(idKanban)){",
									"        msg.description = \"Delete a Kanban successful\";",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Delete a Kanban not successful\";",
									"        msg.description = dataResponse;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description= \"Not reponse status code 200\";",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban/{{id_Kanban}}",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban",
								"{{id_Kanban}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get List Kanban  - Get Changes a Kanbans after deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "913a607c-5221-467d-b6bf-84bd258fa9a1",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Get List Kanban  - Get Changes a Kanbans after deleted',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"GET\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Get List Kanban  - Get Changes a Kanbans after deleted',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"GET\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"// Get project_id from environment",
									"var idKanban = pm.environment.get(\"id_Kanban\");",
									"var msg ;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    if(dataResponse.includes(idKanban)){",
									"        msg.description=\"Data response id Kanban delete correctly\";",
									"        pm.environment.set(\"minDellID\",json.data_del[0].deleted_item.id);",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.description = \"Data response id Kanban delete incorrectly\";",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban?has_del=1&ids={{id_Kanban}}",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban"
							],
							"query": [
								{
									"key": "has_del",
									"value": "1"
								},
								{
									"key": "minDelID",
									"value": "",
									"disabled": true
								},
								{
									"key": "pItem",
									"value": "20",
									"disabled": true
								},
								{
									"key": "ids",
									"value": "{{id_Kanban}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get List Kanban  - Get all Kanbans Pre-Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "913a607c-5221-467d-b6bf-84bd258fa9a1",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Get List Kanban  -  Get all Kanbans Pre-Test',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"GET\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Get List Kanban  -  Get all Kanbans Pre-Test',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"GET\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"",
									"var msg ;",
									"var array = [];",
									"var count = json.data.length;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    if(count>0){",
									"        for(var i=0; i<count; i++){",
									"        array[i] = json.data[i].kanban.id;",
									"        }",
									"        pm.environment.set(\"allIDKanbans[]\",array);",
									"        msg = msgPassed;",
									"        msg.description=\"Get all Kanbans created\";",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Return null Data\";",
									"        msg.description=dataResponse;",
									"    }",
									"}else{",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban?has_del=0",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban"
							],
							"query": [
								{
									"key": "has_del",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Kanbans - Delete all Kanbans",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c325b61-0e08-4bfb-a456-89cfb0bf7db0",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Delete Kanbans - Delete all Kanbans',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"DELETE\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Delete Kanbans - Delete all Kanbans',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"DELETE\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    if(!dataResponse.includes(\"data_error\")){",
									"        var count = json.data.length;",
									"        // convert Array to String",
									"        for(var i = 0; i < count; i++){",
									"            var allKanbanID = pm.environment.get(\"allIDKanbans[]\").toString();",
									"            var listIDKanban = allKanbanID.split(\",\")[i];",
									"            if(dataResponse.includes(listIDKanban)){",
									"                msg.description = \"Delete All id Kanban correctly.\";",
									"            }else{",
									"                msg = msgFailed;",
									"                msg.error = \"Not found item to delete\";",
									"                msg.description=\"Delete All id Kanban incorrectly\";",
									"                break;",
									"        }",
									"    }",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Show error!\";",
									"        msg.description=dataResponse;",
									"    }",
									"}else{",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban/{{allIDKanbans[]}}",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban",
								"{{allIDKanbans[]}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get List Kanban  - Get Changes all Kanbans after deleted option 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "913a607c-5221-467d-b6bf-84bd258fa9a1",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Get List Kanban  - Get Changes all Kanbans after deleted option 1',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"GET\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Get List Kanban  - Get Changes all Kanbans after deleted option 1',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"GET\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"// Get project_id from environment",
									"var idKanban = pm.environment.get(\"id_Kanban\");",
									"var msg ;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    var count = json.data_del.length;",
									"    if(count === 20 && dataResponse.includes(\"data_del\")){",
									"        msg.description=\"Show 20 Kanbans deleted in 1 page, pItem = 20 & has_del = 1 & minDellID\";",
									"        pm.environment.set(\"modifiedGTE-1\",json.data_del[19].deleted_item.updated_date)",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.description = \"Not show 20 Kanbans deleted in 1 page, pItem = 20 & has_del = 1 & minDellID\";",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban?has_del=1&minDelID={{minDellID}}&pItem=20",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban"
							],
							"query": [
								{
									"key": "has_del",
									"value": "1"
								},
								{
									"key": "minDelID",
									"value": "{{minDellID}}"
								},
								{
									"key": "pItem",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get List Kanban  - Get Changes all Kanbans after deleted option 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "913a607c-5221-467d-b6bf-84bd258fa9a1",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Failed - Get List Kanban  - Get Changes all Kanbans after deleted option 2',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"GET\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API-Kanbans\",",
									"    title: 'Passed - Get List Kanban  - Get Changes all Kanbans after deleted option 2',",
									"    endpoint: pm.environment.get('version')+\"/kanban\",",
									"    method: \"GET\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"// Data response",
									"var dataResponse = pm.response.text();",
									"// Status response",
									"var statusResponse = responseCode.code;",
									"// Get project_id from environment",
									"var idKanban = pm.environment.get(\"id_Kanban\");",
									"var modifiedGTE = pm.environment.get(\"modifiedGTE-1\");",
									"var msg ;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"    var count = json.data_del.length;",
									"    var timeupdate = json.data_del[0].deleted_item.updated_date;",
									"    if(count === 10 && timeupdate == modifiedGTE){",
									"        msg.description=\"Show 10 Kanbans deleted in 1 page, pItem = 10 & has_del = 1 & ModifiedGTE = \"+modifiedGTE;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.description = \"Not show 10 Kanbans deleted in 1 page, pItem = 10 & has_del = 1 & ModifiedGTE = \"+modifiedGTE;",
									"        msg.error = \"Error\";",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\";",
									"    msg.description=dataResponse;",
									"}",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban?has_del=1&minDelID={{minDellID}}&pItem=10&modifiedGTE={{modifiedGTE-1}}",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban"
							],
							"query": [
								{
									"key": "has_del",
									"value": "1"
								},
								{
									"key": "minDelID",
									"value": "{{minDellID}}"
								},
								{
									"key": "pItem",
									"value": "10"
								},
								{
									"key": "modifiedGTE",
									"value": "{{modifiedGTE-1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get List Kanban  - Clear Up",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "913a607c-5221-467d-b6bf-84bd258fa9a1",
								"exec": [
									"// Clean up environment",
									"pm.environment.unset(\"nameCollection\");",
									"pm.environment.unset(\"idProjectCreated\");",
									"pm.environment.unset(\"modifiedGTE\");",
									"pm.environment.unset(\"id_Kanban\");",
									"pm.environment.unset(\"modifiedGTE-0\");",
									"pm.environment.unset(\"modifiedGTE-1\");",
									"pm.environment.unset(\"allIDKanbans[]\");",
									"pm.environment.unset(\"ID_Kanban-0\");",
									"pm.environment.unset(\"minDellID\");",
									"pm.environment.unset(\"modifiedGTE-Order\");",
									"pm.environment.unset(\"ModifiedGTE\");",
									"// Clean up each id kanbans",
									"var Array_50idKanbans = pm.environment.get(\"50idKanbans[]\");",
									"console.log(Array_50idKanbans);",
									"var count = Array_50idKanbans.length;",
									"// convert Array to String",
									"var idKanbans = Array_50idKanbans.toString();",
									"for(var i = 0; i<count; i++){",
									"    var listIDKanban = idKanbans.split(\",\")[i];",
									"    pm.environment.unset(\"kanbanid-\"+i);",
									"}",
									"pm.environment.unset(\"50idKanbans[]\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/kanban?has_del=0",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"kanban"
							],
							"query": [
								{
									"key": "has_del",
									"value": "0"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}