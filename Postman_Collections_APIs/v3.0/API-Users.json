{
	"info": {
		"_postman_id": "9c8f537d-70bd-46a1-8340-74166e11db50",
		"name": "API - Users Version 3.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create User",
			"item": [
				{
					"name": "RUN ALL SCRIPTS API - USERS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e1b744bb-acc2-4081-aac1-a4f8c9a6cfbb",
								"exec": [
									"// Use the CryptoJS",
									"var hash = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\")+\":LeftCoastLogic:\"+pm.environment.get(\"password\"))+pm.environment.get(\"appreg\")).toString();",
									"",
									"console.log(\"sig: \" + hash);",
									"postman.setEnvironmentVariable(\"sig\", hash);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "64ab487d-2eda-44c8-b027-39943e652ed9",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"",
									"var keyapi = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\") + pm.environment.get(\"appreg\")) + json.tokenapi).toString();",
									"",
									"postman.setEnvironmentVariable(\"token\", json.tokenapi);",
									"postman.setEnvironmentVariable(\"keyapi\", keyapi);",
									"",
									"var msgFailed = {",
									"    collection:'API_Users',",
									"    title: 'Test Version: '+pm.environment.get('version')+'\\nFailed - Pretest - Login',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"POST\",",
									"    error: \"Has Error\",",
									"    status:\"200\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection:'API_Users',",
									"    title: 'Test Version: '+pm.environment.get('version')+'\\nPassed - Pretest - Login',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"POST\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"",
									"var statusResponse = responseCode.code;",
									"var msg ;",
									"if(statusResponse == 200){",
									"    ",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.description;",
									"    if(body==\"Flo\"){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{email}}\",\n\t\"alias\": \"{{alias}}\",\n\t\"sig\": \"{{sig}}\"\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users/token.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"token.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User - SignUp - Null Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b09767a-2e85-46f1-a1ee-480427ba87ac",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var statusResponse = responseCode.code;",
									"var msgFailed = {",
									"    collection: \"API_Users\",",
									"    title: 'Failed - Create User - SignUp - Null Password',",
									"    endpoint: \"/api/users.json\",",
									"    method: \"post\",",
									"    error: \"Has Error\",",
									"    status:statusResponse,",
									"    description:\"Current API not support this case\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API_Users\",",
									"    title: 'Passed - Create User - SignUp - Null Password',",
									"    endpoint: \"/api/users.json\",",
									"    method: \"post\",",
									"    error: \"No Error\",",
									"    status: \"\",",
									"    description:\"\",",
									"};",
									"",
									"",
									"var statusResponse = responseCode.code;",
									"var msg ;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.description;",
									"    if(body ==\"User/password is invalid.\"){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.status = statusResponse;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4de5da54-4d13-4fcb-9f51-1726318f0fad",
								"exec": [
									"var numberRandom = Math.floor(Math.random() * 1000);",
									"function makeid(l)",
									"{",
									"var textRandom = \"\";",
									"var char_list = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
									"for(var i=0; i < l; i++ )",
									"{  ",
									"textRandom += char_list.charAt(Math.floor(Math.random() * char_list.length));",
									"}",
									"var getServer = pm.environment.get(\"server\");",
									"if(getServer.includes(\"123flo.com\")){",
									"    postman.setEnvironmentVariable(\"email_signup\",\"automation_api_\"+textRandom+numberRandom+\"@123flo.com\" );",
									"}else{",
									"    postman.setEnvironmentVariable(\"email_signup\",\"automation_api_\"+textRandom+numberRandom+\"@flomail.net\" );",
									"}",
									"",
									"return textRandom;",
									"}",
									"console.log(makeid(8));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\":\"{{email_signup}}\",\n\t\"password\":\"\",\n\t\"alias\":\"cbad944424393cf309efaf0e70f1b125\"\n}\n"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User - SignUp - Null Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b09767a-2e85-46f1-a1ee-480427ba87ac",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API_Users\",",
									"    title: 'Failed - Create User - SignUp - Null Username',",
									"    endpoint: \"/api/users.json\",",
									"    method: \"post\",",
									"    error: \"Has Error\",",
									"    status:200,",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API_Users\",",
									"    title: 'Passed - Create User - SignUp - Null Username',",
									"    endpoint: \"/api/users.json\",",
									"    method: \"post\",",
									"    error: \"No Error\",",
									"    status: \"\",",
									"    description:\"\",",
									"};",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Show description: 'User/password is invalid.'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.description).to.eql(\"User/password is invalid.\");",
									"});",
									"",
									"pm.test(\"Status code name has string is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"pm.test(\"Show error '4'\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"error\").to.include(\"4\");",
									"});",
									"",
									"var statusResponse = responseCode.code;",
									"var msg ;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.description;",
									"    if(body ==\"User/password is invalid.\"){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.status = statusResponse;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\"); ",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4de5da54-4d13-4fcb-9f51-1726318f0fad",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\":\"\",\n\t\"password\":\"XNeiHwcdZep1DsZkfd3NzwHOPmNEECLSEP8tG+F/vN+y2Wj4sqlLHiqMpxo5JIulTdpdlbVD5z3bcElLGek/UsbLxb8prnAzX8uyHOpkbhK+qaRnaFMHCJec/HEQZHcdq5ekybEMwxrrq5JNUOJIU+2R3U6kTa5Cz+UyNUMirRM=\",\n\t\"alias\":\"cbad944424393cf309efaf0e70f1b125\"\n\t\n}\t\n"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User - SignUp - Existing username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87266073-d6dd-4608-a857-4752261c8d83",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API_Users\",",
									"    title: 'Failed - Create User - SignUp - Existing username',",
									"    endpoint: \"/api/users.json\",",
									"    method: \"post\",",
									"    error: \"Has Error\",",
									"    status:200,",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API_Users\",",
									"    title: 'Passed - Create User - SignUp - Existing username',",
									"    endpoint: \"/api/users.json\",",
									"    method: \"post\",",
									"    error: \"No Error\",",
									"    status: \"\",",
									"    description:\"\",",
									"};",
									"",
									"var statusResponse = responseCode.code;",
									"var msg ;",
									"if(statusResponse == 200){",
									"    ",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.description;",
									"    if(body ==\"This email already exists.\"){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9f8494e0-ae42-41b8-9091-089ad6829c4b",
								"exec": [
									"var getServer = pm.environment.get(\"server\");",
									"if(getServer.includes(\"123flo.com\")){",
									"    pm.environment.set(\"email_signup\", \"bi_api3@123flo.com\");",
									"}else{",
									"    pm.environment.set(\"email_signup\", \"test_qa@flomail.net\");",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\":\"{{email_signup}}\",\n\t\"password\":\"XuCsIfOHSTfOzNb+vhjopWra6qWF3A0jjQS16a9QfW+85uw8lY0N8wE74KHS8u7o8UiwAD8lJ+QFdQml+wyi/CRndAR0VBNlE4cI8NOAdSoHO66p898UqdYEeyXxnDMcQFwbLmuExKeag4l8v6jKmOIZnh2RevelkcSnmySiSaY=\",\n\t\"alias\":\"cbad944424393cf309efaf0e70f1b125\"\n}\t\n"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User - SignUp - Username equal 2 characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b09767a-2e85-46f1-a1ee-480427ba87ac",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API_Users\",",
									"    title: 'Failed - Create User - SignUp - Username equal 2 characters',",
									"    endpoint: \"/api/users.json\",",
									"    method: \"post\",",
									"    error: \"Has Error\",",
									"    status:200,",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API_Users\",",
									"    title: 'Passed - Create User - SignUp - Username equal 2 characters',",
									"    endpoint: \"/api/users.json\",",
									"    method: \"post\",",
									"    error: \"No Error\",",
									"    status: \"\",",
									"    description:\"\",",
									"};",
									"",
									"var statusResponse = responseCode.code;",
									"var msg ;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.description;",
									"    if(body ==\"User/password is invalid.\"){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a1b19a8a-8a9c-4aa6-a708-309cbbac9b17",
								"exec": [
									"var getServer = pm.environment.get(\"server\");",
									"if(getServer.includes(\"123flo.com\")){",
									"    pm.environment.set(\"email_signup\", \"aa@123flo.com\");",
									"}else{",
									"    pm.environment.set(\"email_signup\", \"aa@flomail.net\");",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\":\"{{email_signup}}\",\n\t\"password\":\"iFd7i3l0jCtjDjcAJYSLCvPEiSj3isZJIv6whcoDYPY3x73zDN5ZrbF4UYwGZzNo5Cm8PyzYnUilSDRJgtFI72s45Kp3lWflm2+FWFORZgt1FEHykuZtCqnb68/sUf/EBgKEXjYgSNYDN9G3CsjBNYKLo8R2Io4LO93d0EwFltU=\",\n\t\"alias\":\"cbad944424393cf309efaf0e70f1b125\"\n\t\n}\t\n"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User - SignUp - Password over 32 characters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "397c1215-3564-4937-add6-d2bbfff4240f",
								"exec": [
									"var numberRandom = Math.floor(Math.random() * 1000);",
									"function makeid(l)",
									"{",
									"var textRandom = \"\";",
									"var char_list = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
									"for(var i=0; i < l; i++ )",
									"{  ",
									"textRandom += char_list.charAt(Math.floor(Math.random() * char_list.length));",
									"}",
									"var getServer = pm.environment.get(\"server\");",
									"if(getServer.includes(\"123flo.com\")){",
									"    postman.setEnvironmentVariable(\"email_signup\",\"automation_api_\"+textRandom+numberRandom+\"@123flo.com\" );",
									"}else{",
									"    postman.setEnvironmentVariable(\"email_signup\",\"automation_api_\"+textRandom+numberRandom+\"@flomail.net\" );",
									"}",
									"",
									"return textRandom;",
									"}",
									"console.log(makeid(8));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e6aef5b8-6d85-4bbc-9c25-b48576f74eee",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API_Users\",",
									"    title: 'Failed - Create User - SignUp - Password over 32 characters',",
									"    endpoint: \"/api/users.json\",",
									"    method: \"post\",",
									"    error: \"Has Error\",",
									"    status:200,",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API_Users\",",
									"    title: 'Passed - Create User - SignUp - Password over 32 characters',",
									"    endpoint: \"/api/users.json\",",
									"    method: \"post\",",
									"    error: \"No Error\",",
									"    status: \"\",",
									"    description:\"\",",
									"};",
									"",
									"var statusResponse = responseCode.code;",
									"var msg ;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.description;",
									"    if(body ==\"Create email account successfully.\"){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\":\"{{email_signup}}\",\n\t\"password\":\"ugr6+KfWjtKoNXTgeuMvlulbcv2FmWxw8AHMClZhomnQZ2FicBMsFN6CfupDI2ZfJDfnkTCdMgct+klccZ6RQ97vDGYxy9FZn1pWlztD9uEyAduxIVuXEtJ29mldwP1p0XlzjEZmKE3xMFbpaqifUWrUSTN1GP6s6OPkFMV0gtI=\",\n\t\"alias\":\"cbad944424393cf309efaf0e70f1b125\"\n\t\n}\t\n"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User - SignUp - Password under 6 characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b09767a-2e85-46f1-a1ee-480427ba87ac",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API_Users\",",
									"    title: 'Failed - Create User - SignUp - Password under 6 characters',",
									"    endpoint: \"/api/users.json\",",
									"    method: \"post\",",
									"    error: \"Has Error\",",
									"    status:200,",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API_Users\",",
									"    title: 'Passed - Create User - SignUp - Password under 6 characters',",
									"    endpoint: \"/api/users.json\",",
									"    method: \"post\",",
									"    error: \"No Error\",",
									"    status: \"\",",
									"    description:\"\",",
									"};",
									"",
									"var statusResponse = responseCode.code;",
									"var msg ;",
									"if(statusResponse == 200){",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.description;",
									"    if(body ==\"Create email account successfully.\"){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "950cb0df-fbf9-498c-bd65-657946a34b6f",
								"exec": [
									"var numberRandom = Math.floor(Math.random() * 1000);",
									"function makeid(l)",
									"{",
									"var textRandom = \"\";",
									"var char_list = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
									"for(var i=0; i < l; i++ )",
									"{  ",
									"textRandom += char_list.charAt(Math.floor(Math.random() * char_list.length));",
									"}",
									"var getServer = pm.environment.get(\"server\");",
									"if(getServer.includes(\"123flo.com\")){",
									"    postman.setEnvironmentVariable(\"email_signup\",\"automation_api_\"+textRandom+numberRandom+\"@123flo.com\" );",
									"}else{",
									"    postman.setEnvironmentVariable(\"email_signup\",\"automation_api_\"+textRandom+numberRandom+\"@flomail.net\" );",
									"}",
									"",
									"return textRandom;",
									"}",
									"console.log(makeid(8));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\":\"{{email_signup}}\",\n\t\"password\":\"yLfRmC1TgrjzW6Xc882a1NYk4zeTua0V5BKO3NsDKiDTALKVFdbbhl+UGDAwOiXqUXRPh66RIBAiR4Vq3M8zSMsGSPmmwKAhS+jE/BFQeanxiXhfjCHdONqJZXRP9OUDOG47OD9WglhpA1DP7uwm6ugTZzRLSHpa1xBt4lF+6GM=\",\n\t\"alias\":\"cbad944424393cf309efaf0e70f1b125\"\n}\n"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User - SignUp - Username has no domain server",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87266073-d6dd-4608-a857-4752261c8d83",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API_Users\",",
									"    title: 'Failed - Create User - SignUp - Username has no domain server',",
									"    endpoint: \"/api/users.json\",",
									"    method: \"post\",",
									"    error: \"Has Error\",",
									"    status:200,",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API_Users\",",
									"    title: 'Passed - Create User - SignUp - Username has no domain server',",
									"    endpoint: \"/api/users.json\",",
									"    method: \"post\",",
									"    error: \"No Error\",",
									"    status: \"\",",
									"    description:\"\",",
									"};",
									"",
									"var statusResponse = responseCode.code;",
									"var msg ;",
									"if(statusResponse == 200){",
									"    ",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.description;",
									"    if(body ==\"User/password is invalid.\"){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\":\"bi_api4123\",\n\t\"password\":\"XuCsIfOHSTfOzNb+vhjopWra6qWF3A0jjQS16a9QfW+85uw8lY0N8wE74KHS8u7o8UiwAD8lJ+QFdQml+wyi/CRndAR0VBNlE4cI8NOAdSoHO66p898UqdYEeyXxnDMcQFwbLmuExKeag4l8v6jKmOIZnh2RevelkcSnmySiSaY=\",\n\t\"alias\":\"cbad944424393cf309efaf0e70f1b125\"\n}\t\n"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User - SignUp - Username has special characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87266073-d6dd-4608-a857-4752261c8d83",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API_Users\",",
									"    title: 'Failed - Create User - SignUp - Username has special characters',",
									"    endpoint: \"/api/users.json\",",
									"    method: \"post\",",
									"    error: \"Has Error\",",
									"    status:200,",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API_Users\",",
									"    title: 'Passed - Create User - SignUp - Username has special characters',",
									"    endpoint: \"/api/users.json\",",
									"    method: \"post\",",
									"    error: \"No Error\",",
									"    status: \"\",",
									"    description:\"\",",
									"};",
									"",
									"var statusResponse = responseCode.code;",
									"var msg ;",
									"if(statusResponse == 200){",
									"    ",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.description;",
									"    if(body ==\"Create email account successfully.\"){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5c426061-da6f-4097-b992-566bf421f7e9",
								"exec": [
									"var numberRandom = Math.floor(Math.random() * 1000);",
									"function makeid(l)",
									"{",
									"var textRandom = \"\";",
									"var char_list = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
									"for(var i=0; i < l; i++ )",
									"{  ",
									"textRandom += char_list.charAt(Math.floor(Math.random() * char_list.length));",
									"}",
									"var getServer = pm.environment.get(\"server\");",
									"if(getServer.includes(\"123flo.com\")){",
									"    postman.setEnvironmentVariable(\"email_signup\",\"automation_api_\"+textRandom+numberRandom+\"@123flo.com\" );",
									"}else{",
									"    postman.setEnvironmentVariable(\"email_signup\",\"automation_api_\"+textRandom+numberRandom+\"@flomail.net\" );",
									"}",
									"",
									"return textRandom;",
									"}",
									"console.log(makeid(8));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\":\"{{email_signup}}\",\n\t\"password\":\"XuCsIfOHSTfOzNb+vhjopWra6qWF3A0jjQS16a9QfW+85uw8lY0N8wE74KHS8u7o8UiwAD8lJ+QFdQml+wyi/CRndAR0VBNlE4cI8NOAdSoHO66p898UqdYEeyXxnDMcQFwbLmuExKeag4l8v6jKmOIZnh2RevelkcSnmySiSaY=\",\n\t\"alias\":\"cbad944424393cf309efaf0e70f1b125\"\n}\t\n"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User - SignUp - None Alias in body",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87266073-d6dd-4608-a857-4752261c8d83",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API_Users\",",
									"    title: 'Failed - Create User - SignUp - None Alias in body',",
									"    endpoint: \"/api/users.json\",",
									"    method: \"post\",",
									"    error: \"Has Error\",",
									"    status:200,",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API_Users\",",
									"    title: 'Passed - Create User - SignUp - None Alias in body',",
									"    endpoint: \"/api/users.json\",",
									"    method: \"post\",",
									"    error: \"No Error\",",
									"    status: \"\",",
									"    description:\"\",",
									"};",
									"",
									"var statusResponse = responseCode.code;",
									"var msg ;",
									"if(statusResponse == 200){",
									"    ",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.description;",
									"    if(body ==\"Your application registry is invalid.\"){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\":\"{{email_signup}}\",\n\t\"password\":\"XuCsIfOHSTfOzNb+vhjopWra6qWF3A0jjQS16a9QfW+85uw8lY0N8wE74KHS8u7o8UiwAD8lJ+QFdQml+wyi/CRndAR0VBNlE4cI8NOAdSoHO66p898UqdYEeyXxnDMcQFwbLmuExKeag4l8v6jKmOIZnh2RevelkcSnmySiSaY=\",\n\t\"alias\":\"\"\n}\t\n"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User - SignUp - Wrong Alias in body",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87266073-d6dd-4608-a857-4752261c8d83",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API_Users\",",
									"    title: 'Failed - Create User - SignUp - Wrong Alias in body',",
									"    endpoint: \"/api/users.json\",",
									"    method: \"post\",",
									"    error: \"Has Error\",",
									"    status:200,",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API_Users\",",
									"    title: 'Passed - Create User - SignUp - Wrong Alias in body',",
									"    endpoint: \"/api/users.json\",",
									"    method: \"post\",",
									"    error: \"No Error\",",
									"    status: \"\",",
									"    description:\"\",",
									"};",
									"",
									"var statusResponse = responseCode.code;",
									"var msg ;",
									"if(statusResponse == 200){",
									"    ",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.description;",
									"    if(body ==\"User/password is invalid.\"){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\":\"{{email_signup}}\",\n\t\"password\":\"XuCsIfOHSTfOzNb+vhjopWra6qWF3A0jjQS16a9QfW+85uw8lY0N8wE74KHS8u7o8UiwAD8lJ+QFdQml+wyi/CRndAR0VBNlE4cI8NOAdSoHO66p898UqdYEeyXxnDMcQFwbLmuExKeag4l8v6jKmOIZnh2RevelkcSnmySiSaY=\",\n\t\"alias\":\"123qwe123qwe\"\n}\t\n"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User - SignUp - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87266073-d6dd-4608-a857-4752261c8d83",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API_Users\",",
									"    title: 'Failed - Create User - SignUp - Success',",
									"    endpoint: \"/api/users.json\",",
									"    method: \"post\",",
									"    error: \"Has Error\",",
									"    status:200,",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API_Users\",",
									"    title: 'Passed - Create User - SignUp - Success',",
									"    endpoint: \"/api/users.json\",",
									"    method: \"post\",",
									"    error: \"No Error\",",
									"    status: \"\",",
									"    description:\"\",",
									"};",
									"",
									"var statusResponse = responseCode.code;",
									"var msg ;",
									"if(statusResponse == 200){",
									"    ",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.description;",
									"    if(body ==\"Create email account successfully.\"){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.status = statusResponse;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"status response failed\"",
									"}",
									"",
									"// Clear an environment",
									"pm.environment.unset(\"email_signup\");",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e714d144-0bab-4e4d-9ced-66aa6f3e1813",
								"exec": [
									"var numberRandom = Math.floor(Math.random() * 1000);",
									"function makeid(l)",
									"{",
									"var textRandom = \"\";",
									"var char_list = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
									"for(var i=0; i < l; i++ )",
									"{  ",
									"textRandom += char_list.charAt(Math.floor(Math.random() * char_list.length));",
									"}",
									"var getServer = pm.environment.get(\"server\");",
									"if(getServer.includes(\"123flo.com\")){",
									"    postman.setEnvironmentVariable(\"email_signup\",\"automation_api_\"+textRandom+numberRandom+\"@123flo.com\" );",
									"}else{",
									"    postman.setEnvironmentVariable(\"email_signup\",\"automation_api_\"+textRandom+numberRandom+\"@flomail.net\" );",
									"}",
									"",
									"return textRandom;",
									"}",
									"console.log(makeid(8));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\":\"{{email_signup}}\",\n\t\"password\":\"bJ8jJFfYlti8QeLhwptZ3fy+doPNOPjg89NwY6nrjC35aFwImSiQzCZEk5cSOA/dtmRiu1tyqa8vSmomYwhKQb7xxmRtBewqDUPg7k0u1kHkO+de9HDwQ6mQwXANTLxJgnwR+/CbQqqHXXexpp2O4IB8J4G+B8wiwaCOLx6x/hE=\",\n\t\"alias\":\"cbad944424393cf309efaf0e70f1b125\"\n}\t\n"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get User Infomartion",
			"item": [
				{
					"name": "Get User Infomartion - Invalid KPI",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "caa6383b-67e4-4ed4-b1c0-7156051df023",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API_Users\",",
									"    title: 'Failed - Get User Infomartion - Invalid KPI',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"post\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API_Users\",",
									"    title: 'Passed - Get User Infomartion - Invalid KPI',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"post\",",
									"    error: \"No Error\",",
									"    status: \"\",",
									"    description:\"\",",
									"};",
									"",
									"var statusResponse = responseCode.code;",
									"var msg ;",
									"if(statusResponse == 401){",
									"    ",
									"    msg = msgPassed;",
									"    msg.status = 401;",
									"    var body = json.description;",
									"    if(body==\"User/password is invalid.\"){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.status = statusResponse;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "token",
								"type": "text",
								"value": "231"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-test login success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e1b744bb-acc2-4081-aac1-a4f8c9a6cfbb",
								"exec": [
									"// Use the CryptoJS",
									"var hash = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\")+\":LeftCoastLogic:\"+pm.environment.get(\"password\"))+pm.environment.get(\"appreg\")).toString();",
									"",
									"console.log(\"sig: \" + hash);",
									"postman.setEnvironmentVariable(\"sig\", hash);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "64ab487d-2eda-44c8-b027-39943e652ed9",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"",
									"var keyapi = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\") + pm.environment.get(\"appreg\")) + json.tokenapi).toString();",
									"",
									"postman.setEnvironmentVariable(\"token\", json.tokenapi);",
									"postman.setEnvironmentVariable(\"keyapi\", keyapi);",
									"",
									"var msgFailed = {",
									"    collection:'API_Users',",
									"    title: 'Failed - Pretest - Login',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"POST\",",
									"    error: \"Has Error\",",
									"    status:\"200\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection:'API_Users',",
									"    title: 'Passed - Pretest - Login',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"POST\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"",
									"var statusResponse = responseCode.code;",
									"var msg ;",
									"if(statusResponse == 200){",
									"    ",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.description;",
									"    if(body==\"Flo\"){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{email}}\",\n\t\"alias\": \"{{alias}}\",\n\t\"sig\": \"{{sig}}\"\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users/token.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"token.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Infomartion - Valid KPI",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "444684c5-345f-4b00-abeb-913069ececaa",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"",
									"var msgFailed = {",
									"    collection: \"API_Users\",",
									"    title: 'Failed - Get User Infomartion - Valid KPI',",
									"    endpoint: \"/api/users.json\",",
									"    method: \"post\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API_Users\",",
									"    title: 'Passed - Get User Infomartion - Valid KPI',",
									"    endpoint: \"/api/users.json\",",
									"    method: \"post\",",
									"    error: \"No Error\",",
									"    status: \"\",",
									"    description:\"\",",
									"};",
									"",
									"var emailaddress = pm.environment.get(\"email\");",
									"var msg ;",
									"var statusResponse = responseCode.code;",
									"if(statusResponse == 200){",
									"    ",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.user.email;",
									"    if(body==emailaddress){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.status = statusResponse;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update account",
			"item": [
				{
					"name": "Update account - Update Account Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ca5d9315-a4da-41eb-97d3-285542c96d7f",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"",
									"var msgFailed = {",
									"    collection: \"API_Users\",",
									"    title: 'Failed - Update account - Update Account Info',",
									"    endpoint: \"/api/users/update.json\",",
									"    method: \"post\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API_Users\",",
									"    title: 'Passed - Update account - Update Account Info',",
									"    endpoint: \"/api/users/update.json\",",
									"    method: \"post\",",
									"    error: \"No Error\",",
									"    status: \"\",",
									"    description:\"\",",
									"};",
									"",
									"",
									"var msg ;",
									"var statusResponse = responseCode.code;",
									"if(statusResponse == 200){",
									"    ",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body1 = json.user.fullname;",
									"    var body2 = json.user.description;",
									"    var body3 = json.user.secondary_email;",
									"    var body4 = json.user.birthday;",
									"    var body5 = json.user.gender;",
									"    var body6 = json.user.country;",
									"    var body7 = json.user.phone_number;",
									"    var body8 = json.user.country_code;",
									"    var body9 = json.user.question;",
									"    var body10 = json.user.answer;",
									"    ",
									"    if(body1==\"api_testing\"&& body2==\"Flo\" && body3==\"bi_api3@123flo.com\" && body4==\"14.02.2030\" && body5===0 && body6==\"Vietnam\" && body7==\"123567890\" && body8==\"70000\" && body9==\"Do you like Flo app?\" && body10==\"Yes, I do!\" ){",
									"        msg.description=body2;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.status = statusResponse;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"fullname\": \"api_testing\",\n    \"description\": \"Flo\",\n    \"secondary_email\": \"bi_api3@123flo.com\",\n    \"birthday\": \"14.02.2030\",\n    \"gender\": 0,\n    \"country\": \"Vietnam\",\n    \"phone_number\": \"123567890\",\n    \"country_code\": \"70000\",\n    \"question\": \"Do you like Flo app?\",\n    \"answer\": \"Yes, I do!\"\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users/update.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"update.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Token",
			"item": [
				{
					"name": "Get Token - SignIn - Wrong Password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e1b744bb-acc2-4081-aac1-a4f8c9a6cfbb",
								"exec": [
									"pm.environment.set(\"password\", \"123456qweqwe\");",
									"// Use the CryptoJS",
									"var hash = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\")+\":LeftCoastLogic:\"+pm.environment.get(\"password\"))+pm.environment.get(\"appreg\")).toString();",
									"",
									"console.log(\"sig: \" + hash);",
									"postman.setEnvironmentVariable(\"sig\", hash);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "64ab487d-2eda-44c8-b027-39943e652ed9",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"",
									"var keyapi = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\") + pm.environment.get(\"appreg\")) + json.tokenapi).toString();",
									"",
									"postman.setEnvironmentVariable(\"token\", json.tokenapi);",
									"postman.setEnvironmentVariable(\"keyapi\", keyapi);",
									"",
									"",
									"var msgFailed = {",
									"    collection: \"API_Users\",",
									"    title: 'Failed - Get Token - SignIn - Wrong Password',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"post\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API_Users\",",
									"    title: 'Passed - Get Token - SignIn - Wrong Password',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"post\",",
									"    error: \"No Error\",",
									"    status: \"200 OK\",",
									"    description:\"\",",
									"};",
									"",
									"var statusResponse = responseCode.code;",
									"var msg ;",
									"if(statusResponse == 200){",
									"    ",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.description;",
									"    if(body==\"Your signature is invalid.\"){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{email}}\",\n\t\"alias\": \"{{alias}}\",\n\t\"sig\": \"{{sig}}\"\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users/token.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"token.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Token - SignIn - Wrong Username",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7c8a27a1-3a6f-4952-8af5-35f4df154f82",
								"exec": [
									"postman.setEnvironmentVariable(\"password\",\"123456\");",
									"var getServer = pm.environment.get(\"server\");",
									"if(getServer.includes(\"123flo.com\")){",
									"    pm.environment.set(\"email\", \"api_teste7@123flo.com\");",
									"}else{",
									"    pm.environment.set(\"email\", \"test_qaaa@flomail.net\");",
									"}",
									"// Use the CryptoJS",
									"var hash = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\")+\":LeftCoastLogic:\"+pm.environment.get(\"password\"))+pm.environment.get(\"appreg\")).toString();",
									"",
									"console.log(\"sig: \" + hash);",
									"postman.setEnvironmentVariable(\"sig\", hash);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5d8fc4d2-1bf5-4828-b08f-31f2aef0b298",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"",
									"var keyapi = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\") + pm.environment.get(\"appreg\")) + json.tokenapi).toString();",
									"",
									"postman.setEnvironmentVariable(\"token\", json.tokenapi);",
									"postman.setEnvironmentVariable(\"keyapi\", keyapi);",
									"",
									"",
									"var msgFailed = {",
									"    collection: \"API_Users\",",
									"    title: 'Failed - Get Token - SignIn - Wrong Username',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"post\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API_Users\",",
									"    title: 'Passed - Get Token - SignIn - Wrong Username',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"post\",",
									"    error: \"No Error\",",
									"    status: \"200 OK\",",
									"    description:\"\",",
									"};",
									"",
									"var statusResponse = responseCode.code;",
									"var msg ;",
									"if(statusResponse == 200){",
									"    ",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.description;",
									"    if(body==\"User/password is invalid.\"){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{email}}\",\n\t\"alias\": \"{{alias}}\",\n\t\"sig\": \"{{sig}}\"\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users/token.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"token.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Token - SignIn - Password under 6 characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3cd1a7bf-fe7d-4709-8fed-59870e9fe78a",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"",
									"var keyapi = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\") + pm.environment.get(\"appreg\")) + json.tokenapi).toString();",
									"",
									"postman.setEnvironmentVariable(\"token\", json.tokenapi);",
									"postman.setEnvironmentVariable(\"keyapi\", keyapi);",
									"",
									"",
									"var msgFailed = {",
									"    collection: \"API_Users\",",
									"    title: 'Failed - Get Token - SignIn - Password under 6 characters',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"post\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API_Users\",",
									"    title: 'Passed - Get Token - SignIn - Password under 6 characters',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"post\",",
									"    error: \"No Error\",",
									"    status: \"200 OK\",",
									"    description:\"\",",
									"};",
									"",
									"var statusResponse = responseCode.code;",
									"var msg ;",
									"if(statusResponse == 200){",
									"    ",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.description;",
									"    if(body==\"Your signature is invalid.\"){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "745c103e-c50c-475d-aa27-1f2ad3550b44",
								"exec": [
									"var getServer = pm.environment.get(\"server\");",
									"if(getServer.includes(\"123flo.com\")){",
									"    pm.environment.set(\"email\", \"api_test7@123flo.com\");",
									"}else{",
									"    pm.environment.set(\"email\", \"test_qa@flomail.net\");",
									"}",
									"pm.environment.set(\"password\", \"12345\");",
									"// Use the CryptoJS",
									"var hash = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\")+\":LeftCoastLogic:\"+pm.environment.get(\"password\"))+pm.environment.get(\"appreg\")).toString();",
									"",
									"console.log(\"sig: \" + hash);",
									"postman.setEnvironmentVariable(\"sig\", hash);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{email}}\",\n\t\"alias\": \"{{alias}}\",\n\t\"sig\": \"{{sig}}\"\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users/token.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"token.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Token - SignIn - Password over 32 characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87266073-d6dd-4608-a857-4752261c8d83",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"",
									"var keyapi = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\") + pm.environment.get(\"appreg\")) + json.tokenapi).toString();",
									"",
									"postman.setEnvironmentVariable(\"token\", json.tokenapi);",
									"postman.setEnvironmentVariable(\"keyapi\", keyapi);",
									"",
									"",
									"var msgFailed = {",
									"    collection: \"API_Users\",",
									"    title: 'Failed - Get Token - SignIn - Password over 32 characters',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"post\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API_Users\",",
									"    title: 'Passed - Get Token - SignIn - Password over 32 characters',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"post\",",
									"    error: \"No Error\",",
									"    status: \"200 OK\",",
									"    description:\"\",",
									"};",
									"",
									"var statusResponse = responseCode.code;",
									"var msg ;",
									"if(statusResponse == 200){",
									"    ",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.description;",
									"    if(body==\"Your signature is invalid.\"){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1dd9aa60-9b05-4e0a-ab33-09023e26f0c6",
								"exec": [
									"postman.setEnvironmentVariable(\"password\", \"LoginFailureWithInvalidPasswordove32characters\");",
									"var getServer = pm.environment.get(\"server\");",
									"if(getServer.includes(\"123flo.com\")){",
									"    pm.environment.set(\"email\", \"api_test7@123flo.com\");",
									"}else{",
									"    pm.environment.set(\"email\", \"test_qa@flomail.net\");",
									"}",
									"",
									"// Use the CryptoJS",
									"var hash = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\")+\":LeftCoastLogic:\"+pm.environment.get(\"password\"))+pm.environment.get(\"appreg\")).toString();",
									"",
									"console.log(\"sig: \" + hash);",
									"postman.setEnvironmentVariable(\"sig\", hash);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{email}}\",\n\t\"alias\": \"{{alias}}\",\n\t\"sig\": \"{{sig}}\"\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users/token.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"token.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Token - SignIn - Null Password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e1b744bb-acc2-4081-aac1-a4f8c9a6cfbb",
								"exec": [
									"var getServer = pm.environment.get(\"server\");",
									"if(getServer.includes(\"123flo.com\")){",
									"    pm.environment.set(\"email\", \"api_test7@123flo.com\");",
									"}else{",
									"    pm.environment.set(\"email\", \"test_qa@flomail.net\");",
									"}",
									"pm.environment.set(\"password\", \"\");",
									"// Use the CryptoJS",
									"var hash = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\")+\":LeftCoastLogic:\"+pm.environment.get(\"password\"))+pm.environment.get(\"appreg\")).toString();",
									"",
									"console.log(\"sig: \" + hash);",
									"postman.setEnvironmentVariable(\"sig\", hash);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "64ab487d-2eda-44c8-b027-39943e652ed9",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"",
									"var keyapi = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\") + pm.environment.get(\"appreg\")) + json.tokenapi).toString();",
									"",
									"postman.setEnvironmentVariable(\"token\", json.tokenapi);",
									"postman.setEnvironmentVariable(\"keyapi\", keyapi);",
									"",
									"",
									"var msgFailed = {",
									"    collection: \"API_Users\",",
									"    title: 'Failed - Get Token - SignIn - Null Password',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"post\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API_Users\",",
									"    title: 'Passed - Get Token - SignIn - Null Password',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"post\",",
									"    error: \"No Error\",",
									"    status: \"200 OK\",",
									"    description:\"\",",
									"};",
									"",
									"var statusResponse = responseCode.code;",
									"var msg ;",
									"if(statusResponse == 200){",
									"    ",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.description;",
									"    if(body==\"Your signature is invalid.\"){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{email}}\",\n\t\"alias\": \"{{alias}}\",\n\t\"sig\": \"{{sig}}\"\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users/token.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"token.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Token - SignIn - Null Username",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e1b744bb-acc2-4081-aac1-a4f8c9a6cfbb",
								"exec": [
									"postman.setEnvironmentVariable(\"password\", \"123456\");",
									"postman.setEnvironmentVariable(\"email\", \"\");",
									"",
									"// Use the CryptoJS",
									"var hash = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\")+\":LeftCoastLogic:\"+pm.environment.get(\"password\"))+pm.environment.get(\"appreg\")).toString();",
									"",
									"console.log(\"sig: \" + hash);",
									"postman.setEnvironmentVariable(\"sig\", hash);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "64ab487d-2eda-44c8-b027-39943e652ed9",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"",
									"var keyapi = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\") + pm.environment.get(\"appreg\")) + json.tokenapi).toString();",
									"",
									"postman.setEnvironmentVariable(\"token\", json.tokenapi);",
									"postman.setEnvironmentVariable(\"keyapi\", keyapi);",
									"",
									"",
									"var msgFailed = {",
									"    collection: \"API_Users\",",
									"    title: 'Failed - Get Token - SignIn - Null Username',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"post\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API_Users\",",
									"    title: 'Passed - Get Token - SignIn - Null Username',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"post\",",
									"    error: \"No Error\",",
									"    status: \"200 OK\",",
									"    description:\"\",",
									"};",
									"",
									"var statusResponse = responseCode.code;",
									"var msg ;",
									"if(statusResponse == 200){",
									"    ",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.description;",
									"    if(body==\"User/password is invalid.\"){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{email}}\",\n\t\"alias\": \"{{alias}}\",\n\t\"sig\": \"{{sig}}\"\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users/token.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"token.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Token - SignIn - Username has special characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87266073-d6dd-4608-a857-4752261c8d83",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"",
									"var keyapi = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\") + pm.environment.get(\"appreg\")) + json.tokenapi).toString();",
									"",
									"postman.setEnvironmentVariable(\"token\", json.tokenapi);",
									"postman.setEnvironmentVariable(\"keyapi\", keyapi);",
									"",
									"",
									"var msgFailed = {",
									"    collection: \"API_Users\",",
									"    title: 'Failed - Get Token - SignIn - Username has special characters',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"post\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API_Users\",",
									"    title: 'Passed - Get Token - SignIn - Username has special characters',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"post\",",
									"    error: \"No Error\",",
									"    status: \"200 OK\",",
									"    description:\"\",",
									"};",
									"",
									"var statusResponse = responseCode.code;",
									"var msg ;",
									"if(statusResponse == 200){",
									"    ",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.description;",
									"    if(body==\"User/password is invalid.\"){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "765bc8fd-c99b-4d80-90c3-86f7c0105d18",
								"exec": [
									"var getServer = pm.environment.get(\"server\");",
									"if(getServer.includes(\"123flo.com\")){",
									"    pm.environment.set(\"email\", \"api_test7%$#@123flo.com\");",
									"}else{",
									"    pm.environment.set(\"email\", \"test_qa&^#%@flomail.net\");",
									"}",
									"pm.environment.set(\"password\", \"123456\");",
									"// Use the CryptoJS",
									"var hash = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\")+\":LeftCoastLogic:\"+pm.environment.get(\"password\"))+pm.environment.get(\"appreg\")).toString();",
									"",
									"console.log(\"sig: \" + hash);",
									"postman.setEnvironmentVariable(\"sig\", hash);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{email}}\",\n\t\"alias\": \"{{alias}}\",\n\t\"sig\": \"{{sig}}\"\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users/token.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"token.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Token - SignIn - Null Username and Password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e1b744bb-acc2-4081-aac1-a4f8c9a6cfbb",
								"exec": [
									"postman.setEnvironmentVariable(\"password\", \"\");",
									"postman.setEnvironmentVariable(\"email\", \"\");",
									"",
									"// Use the CryptoJS",
									"var hash = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\")+\":LeftCoastLogic:\"+pm.environment.get(\"password\"))+pm.environment.get(\"appreg\")).toString();",
									"",
									"console.log(\"sig: \" + hash);",
									"postman.setEnvironmentVariable(\"sig\", hash);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "64ab487d-2eda-44c8-b027-39943e652ed9",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"",
									"var keyapi = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\") + pm.environment.get(\"appreg\")) + json.tokenapi).toString();",
									"",
									"postman.setEnvironmentVariable(\"token\", json.tokenapi);",
									"postman.setEnvironmentVariable(\"keyapi\", keyapi);",
									"",
									"",
									"var msgFailed = {",
									"    collection: \"API_Users\",",
									"    title: 'Failed - Get Token - SignIn - Null Username and Password',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"post\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API_Users\",",
									"    title: 'Passed - Get Token - SignIn - Null Username and Password',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"post\",",
									"    error: \"No Error\",",
									"    status: \"200 OK\",",
									"    description:\"\",",
									"};",
									"",
									"var statusResponse = responseCode.code;",
									"var msg ;",
									"if(statusResponse == 200){",
									"    ",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.description;",
									"    if(body==\"User/password is invalid.\"){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{email}}\",\n\t\"alias\": \"{{alias}}\",\n\t\"sig\": \"{{sig}}\"\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users/token.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"token.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Token - SignIn - Wrong Alias in body",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e1b744bb-acc2-4081-aac1-a4f8c9a6cfbb",
								"exec": [
									"var getServer = pm.environment.get(\"server\");",
									"if(getServer.includes(\"123flo.com\")){",
									"    pm.environment.set(\"email\", \"api_test7@123flo.com\");",
									"}else{",
									"    pm.environment.set(\"email\", \"test_qa@flomail.net\");",
									"}",
									"pm.environment.set(\"password\", \"123456\");",
									"// Use the CryptoJS",
									"var hash = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\")+\":LeftCoastLogic:\"+pm.environment.get(\"password\"))+pm.environment.get(\"appreg\")).toString();",
									"",
									"console.log(\"sig: \" + hash);",
									"postman.setEnvironmentVariable(\"sig\", hash);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "64ab487d-2eda-44c8-b027-39943e652ed9",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"",
									"var keyapi = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\") + pm.environment.get(\"appreg\")) + json.tokenapi).toString();",
									"",
									"postman.setEnvironmentVariable(\"token\", json.tokenapi);",
									"postman.setEnvironmentVariable(\"keyapi\", keyapi);",
									"",
									"",
									"var msgFailed = {",
									"    collection: \"API_Users\",",
									"    title: 'Failed - Get Token - SignIn - Wrong Alias in body',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"post\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API_Users\",",
									"    title: 'Passed - Get Token - SignIn - Wrong Alias in body',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"post\",",
									"    error: \"No Error\",",
									"    status: \"200 OK\",",
									"    description:\"\",",
									"};",
									"",
									"var statusResponse = responseCode.code;",
									"var msg ;",
									"if(statusResponse == 200){",
									"    ",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.description;",
									"    if(body==\"Your application registry is invalid.\"){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{email}}\",\n\t\"alias\": \"4789412231567413dsdadasdasdsada845613213\",\n\t\"sig\": \"{{sig}}\"\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users/token.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"token.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Token - SignIn - None Alias in body",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e1b744bb-acc2-4081-aac1-a4f8c9a6cfbb",
								"exec": [
									"var getServer = pm.environment.get(\"server\");",
									"if(getServer.includes(\"123flo.com\")){",
									"    pm.environment.set(\"email\", \"api_test7@123flo.com\");",
									"}else{",
									"    pm.environment.set(\"email\", \"test_qa@flomail.net\");",
									"}",
									"pm.environment.set(\"password\", \"123456\");",
									"// Use the CryptoJS",
									"var hash = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\")+\":LeftCoastLogic:\"+pm.environment.get(\"password\"))+pm.environment.get(\"appreg\")).toString();",
									"",
									"console.log(\"sig: \" + hash);",
									"postman.setEnvironmentVariable(\"sig\", hash);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "64ab487d-2eda-44c8-b027-39943e652ed9",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"",
									"var keyapi = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\") + pm.environment.get(\"appreg\")) + json.tokenapi).toString();",
									"",
									"postman.setEnvironmentVariable(\"token\", json.tokenapi);",
									"postman.setEnvironmentVariable(\"keyapi\", keyapi);",
									"",
									"",
									"var msgFailed = {",
									"    collection: \"API_Users\",",
									"    title: 'Failed - Get Token - SignIn - None Alias in body',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"post\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API_Users\",",
									"    title: 'Passed - Get Token - SignIn - None Alias in body',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"post\",",
									"    error: \"No Error\",",
									"    status: \"200 OK\",",
									"    description:\"\",",
									"};",
									"",
									"var statusResponse = responseCode.code;",
									"var msg ;",
									"if(statusResponse == 200){",
									"    ",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.description;",
									"    if(body==\"Your application registry is invalid.\"){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{email}}\",\n\t\"sig\": \"{{sig}}\"\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users/token.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"token.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Token - SignIn - Success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e1b744bb-acc2-4081-aac1-a4f8c9a6cfbb",
								"exec": [
									"var getServer = pm.environment.get(\"server\");",
									"if(getServer.includes(\"123flo.com\")){",
									"    pm.environment.set(\"email\", \"api_test7@123flo.com\");",
									"}else{",
									"    pm.environment.set(\"email\", \"test_qa@flomail.net\");",
									"}",
									"pm.environment.set(\"password\", \"123456\");",
									"// Use the CryptoJS",
									"var hash = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\")+\":LeftCoastLogic:\"+pm.environment.get(\"password\"))+pm.environment.get(\"appreg\")).toString();",
									"",
									"console.log(\"sig: \" + hash);",
									"postman.setEnvironmentVariable(\"sig\", hash);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "64ab487d-2eda-44c8-b027-39943e652ed9",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"",
									"var keyapi = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\") + pm.environment.get(\"appreg\")) + json.tokenapi).toString();",
									"",
									"postman.setEnvironmentVariable(\"token\", json.tokenapi);",
									"postman.setEnvironmentVariable(\"keyapi\", keyapi);",
									"",
									"",
									"var msgFailed = {",
									"    collection: \"API_Users\",",
									"    title: 'Failed - Get Token - SignIn - Success',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"post\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API_Users\",",
									"    title: 'Passed - Get Token - SignIn - Success',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"post\",",
									"    error: \"No Error\",",
									"    status: \"200 OK\",",
									"    description:\"\",",
									"};",
									"",
									"var statusResponse = responseCode.code;",
									"var msg ;",
									"if(statusResponse == 200){",
									"    ",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.description;",
									"    if(body==\"Flo\"){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{email}}\",\n\t\"alias\": \"{{alias}}\",\n\t\"sig\": \"{{sig}}\"\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users/token.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"token.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Change password",
			"item": [
				{
					"name": "Pre-test login success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e1b744bb-acc2-4081-aac1-a4f8c9a6cfbb",
								"exec": [
									"var getServer = pm.environment.get(\"server\");",
									"if(getServer.includes(\"123flo.com\")){",
									"    pm.environment.set(\"email\", \"api_test7@123flo.com\");",
									"}else{",
									"    pm.environment.set(\"email\", \"test_qa@flomail.net\");",
									"}",
									"pm.environment.set(\"password\", \"123456\");",
									"// Use the CryptoJS",
									"var hash = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\")+\":LeftCoastLogic:\"+pm.environment.get(\"password\"))+pm.environment.get(\"appreg\")).toString();",
									"",
									"console.log(\"sig: \" + hash);",
									"postman.setEnvironmentVariable(\"sig\", hash);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "64ab487d-2eda-44c8-b027-39943e652ed9",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"",
									"var keyapi = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\") + pm.environment.get(\"appreg\")) + json.tokenapi).toString();",
									"",
									"postman.setEnvironmentVariable(\"token\", json.tokenapi);",
									"postman.setEnvironmentVariable(\"keyapi\", keyapi);",
									"",
									"var msgFailed = {",
									"    collection:'API_Users',",
									"    title: 'Failed - Pretest - Login',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"POST\",",
									"    error: \"Has Error\",",
									"    status:\"200\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection:'API_Users',",
									"    title: 'Passed - Pretest - Login',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"POST\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"",
									"var statusResponse = responseCode.code;",
									"var msg ;",
									"if(statusResponse == 200){",
									"    ",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.description;",
									"    if(body==\"Flo\"){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{email}}\",\n\t\"alias\": \"{{alias}}\",\n\t\"sig\": \"{{sig}}\"\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users/token.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"token.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password - Under 6 characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9650f208-b0a0-46ed-9094-929edb6efdb7",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"",
									"var msgFailed = {",
									"    collection: \"API_Users\",",
									"    title: 'Failed - Change password - Under 6 characters',",
									"    endpoint: \"/api/users/changepass.json\",",
									"    method: \"post\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API_Users\",",
									"    title: 'Passed - Change password - Under 6 characters',",
									"    endpoint: \"/api/users/changepass.json\",",
									"    method: \"post\",",
									"    error: \"No Error\",",
									"    status: \"\",",
									"    description:\"\",",
									"};",
									"",
									"",
									"var msg ;",
									"var statusResponse = responseCode.code;",
									"var emailaddress = pm.environment.get(\"email\");",
									"if(statusResponse==200){",
									"    ",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.user.email;",
									"    if(body==emailaddress){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.status = statusResponse;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "596bcd60-f482-43bf-b49b-d96fcaad41d6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"XiJY7gKsq7qt7HEifwQ88RrzdARRYOuTgrFPsG18KJdTwaFEmFRj9Oo9E8u2ALtfL6iyAfuC+Ezaayf2s8qEitqJRscniTEjjNbd+1s0beH51nyLJSs+KFMmiCL5kWOueZUYNxB+G1HPhoVxMWuP0wi2bJZlgfZamEfEqs4TAWI=\"\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users/changepass.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"changepass.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Token - SignIn - Success - pre-test",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e1b744bb-acc2-4081-aac1-a4f8c9a6cfbb",
								"exec": [
									"var getServer = pm.environment.get(\"server\");",
									"if(getServer.includes(\"123flo.com\")){",
									"    pm.environment.set(\"email\", \"api_test7@123flo.com\");",
									"}else{",
									"    pm.environment.set(\"email\", \"test_qa@flomail.net\");",
									"}",
									"pm.environment.set(\"password\", \"12345\");",
									"// Use the CryptoJS",
									"var hash = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\")+\":LeftCoastLogic:\"+pm.environment.get(\"password\"))+pm.environment.get(\"appreg\")).toString();",
									"",
									"console.log(\"sig: \" + hash);",
									"postman.setEnvironmentVariable(\"sig\", hash);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "64ab487d-2eda-44c8-b027-39943e652ed9",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"",
									"var keyapi = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\") + pm.environment.get(\"appreg\")) + json.tokenapi).toString();",
									"",
									"postman.setEnvironmentVariable(\"token\", json.tokenapi);",
									"postman.setEnvironmentVariable(\"keyapi\", keyapi);",
									"",
									"var msgFailed = {",
									"    collection:'API_Users',",
									"    title: 'Failed - Pretest - Login',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"POST\",",
									"    error: \"Has Error\",",
									"    status:\"200\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection:'API_Users',",
									"    title: 'Passed - Pretest - Login',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"POST\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"",
									"var statusResponse = responseCode.code;",
									"var msg ;",
									"if(statusResponse == 200){",
									"    ",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.description;",
									"    if(body==\"Flo\"){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{email}}\",\n\t\"alias\": \"{{alias}}\",\n\t\"sig\": \"{{sig}}\"\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users/token.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"token.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password - Over 32 characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9650f208-b0a0-46ed-9094-929edb6efdb7",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"",
									"var msgFailed = {",
									"    collection: \"API_Users\",",
									"    title: 'Failed - Change password - Over 32 characters',",
									"    endpoint: \"/api/users/changepass.json\",",
									"    method: \"post\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API_Users\",",
									"    title: 'Passed - Change password - Over 32 characters',",
									"    endpoint: \"/api/users/changepass.json\",",
									"    method: \"post\",",
									"    error: \"No Error\",",
									"    status: \"\",",
									"    description:\"\",",
									"};",
									"",
									"",
									"var msg ;",
									"var statusResponse = responseCode.code;",
									"var emailaddress = pm.environment.get(\"email\");",
									"if(statusResponse == 200){",
									"    ",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.user.email;",
									"    if(body==emailaddress){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"            msg.status = statusResponse;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "596bcd60-f482-43bf-b49b-d96fcaad41d6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"P48mFuTNwdoBQNHlkNbMgtdOj9wF8lNTi4xUJYoRO0CU4aYCSmAfqQErpih/MvO1EOi8M0EQQjnkyBgUblH+H+2/mhlFwP/x2tPBkhoLHyzEdHCsi47kJWCh2fGDpR9WfpqrZM5G4VyYw7IHNneLVofKri5plNtMvLnxV8XIyfA=\"\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users/changepass.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"changepass.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Token - SignIn - Success - pre-test",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e1b744bb-acc2-4081-aac1-a4f8c9a6cfbb",
								"exec": [
									"",
									"var getServer = pm.environment.get(\"server\");",
									"if(getServer.includes(\"123flo.com\")){",
									"    pm.environment.set(\"email\", \"api_test7@123flo.com\");",
									"}else{",
									"    pm.environment.set(\"email\", \"test_qa@flomail.net\");",
									"}",
									"postman.setEnvironmentVariable(\"password\",\"LoginFailureWithInvalidPasswordove32characters\");",
									"// Use the CryptoJS",
									"var hash = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\")+\":LeftCoastLogic:\"+pm.environment.get(\"password\"))+pm.environment.get(\"appreg\")).toString();",
									"",
									"console.log(\"sig: \" + hash);",
									"postman.setEnvironmentVariable(\"sig\", hash);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "64ab487d-2eda-44c8-b027-39943e652ed9",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"",
									"var keyapi = CryptoJS.MD5( CryptoJS.MD5(pm.environment.get(\"email\") + pm.environment.get(\"appreg\")) + json.tokenapi).toString();",
									"",
									"postman.setEnvironmentVariable(\"token\", json.tokenapi);",
									"postman.setEnvironmentVariable(\"keyapi\", keyapi);",
									"",
									"var msgFailed = {",
									"    collection:'API_Users',",
									"    title: 'Failed - Pretest - Login',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"POST\",",
									"    error: \"Has Error\",",
									"    status:\"200\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection:'API_Users',",
									"    title: 'Passed - Pretest - Login',",
									"    endpoint: \"/api/users/token.json\",",
									"    method: \"POST\",",
									"    error: \"No Error\",",
									"    status: \"200\",",
									"    description:\"\",",
									"};",
									"",
									"var statusResponse = responseCode.code;",
									"var msg ;",
									"if(statusResponse == 200){",
									"    ",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.description;",
									"    if(body==\"Flo\"){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"Status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"{{email}}\",\n\t\"alias\": \"{{alias}}\",\n\t\"sig\": \"{{sig}}\"\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users/token.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"token.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change password - Valid Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9650f208-b0a0-46ed-9094-929edb6efdb7",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"",
									"var msgFailed = {",
									"    collection: \"API_Users\",",
									"    title: 'Failed - Change password - Valid Password',",
									"    endpoint: \"/api/users/changepass.json\",",
									"    method: \"post\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API_Users\",",
									"    title: 'Passed - Change password - Valid Password',",
									"    endpoint: \"/api/users/changepass.json\",",
									"    method: \"post\",",
									"    error: \"No Error\",",
									"    status: \"\",",
									"    description:\"\",",
									"};",
									"",
									"",
									"var msg ;",
									"var statusResponse = responseCode.code;",
									"var emailaddress = pm.environment.get(\"email\");",
									"if(statusResponse == 200){",
									"    ",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.user.email;",
									"    if(body==emailaddress){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"            msg.status = statusResponse;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "596bcd60-f482-43bf-b49b-d96fcaad41d6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "token",
								"type": "text",
								"value": "{{keyapi}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"bJ8jJFfYlti8QeLhwptZ3fy+doPNOPjg89NwY6nrjC35aFwImSiQzCZEk5cSOA/dtmRiu1tyqa8vSmomYwhKQb7xxmRtBewqDUPg7k0u1kHkO+de9HDwQ6mQwXANTLxJgnwR+/CbQqqHXXexpp2O4IB8J4G+B8wiwaCOLx6x/hE=\"\n}"
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users/changepass.json",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"changepass.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Check email",
			"item": [
				{
					"name": "Check email - Account is registered",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "357f79fc-9388-4684-9587-d9c955c731d2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "11f76e38-b3a8-4451-ab08-0e6a2320d204",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"",
									"var msgFailed = {",
									"    collection: \"API_Users\",",
									"    title: 'Failed - Check email - Account is registered',",
									"    endpoint: \"/api/users/checkemail.json?\",",
									"    method: \"post\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API_Users\",",
									"    title: 'Passed - Check email - Account is registered',",
									"    endpoint: \"/api/users/checkemail.json?\",",
									"    method: \"post\",",
									"    error: \"No Error\",",
									"    status: \"\",",
									"    description:\"\",",
									"};",
									"",
									"var statusResponse = responseCode.code;",
									"var msg ;",
									"if(statusResponse == 200){",
									"    ",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.description;",
									"    if(body==\"This email already exists.\"){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users/checkemail.json?email={{email}}",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"checkemail.json"
							],
							"query": [
								{
									"key": "email",
									"value": "{{email}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check email - Account is not registered",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "357f79fc-9388-4684-9587-d9c955c731d2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "11f76e38-b3a8-4451-ab08-0e6a2320d204",
								"exec": [
									"var json = JSON.parse(responseBody);",
									"var msgFailed = {",
									"    collection: \"API_Users\",",
									"    title: 'Failed - Check email - Account is not registered',",
									"    endpoint: \"/api/users/checkemail.json?\",",
									"    method: \"post\",",
									"    error: \"Has Error\",",
									"    status:\"\",",
									"    description:\"\",",
									"};",
									"var msgPassed = {",
									"    collection: \"API_Users\",",
									"    title: 'Passed - Check email - Account is not registered',",
									"    endpoint: \"/api/users/checkemail.json?\",",
									"    method: \"post\",",
									"    error: \"No Error\",",
									"    status: \"\",",
									"    description:\"\",",
									"};",
									"",
									"var statusResponse = responseCode.code;",
									"var msg ;",
									"if(statusResponse == 200){",
									"    ",
									"    msg = msgPassed;",
									"    msg.status = 200;",
									"    var body = json.description;",
									"    if(body==\"It appears that the email address is not registered with us.\"){",
									"        msg.description=body;",
									"    }else{",
									"        msg = msgFailed;",
									"        msg.status = statusResponse;",
									"        msg.error = \"Description response failed\";",
									"        msg.description=body;",
									"    }",
									"}else  {",
									"    msg = msgFailed;",
									"    msg.status = statusResponse;",
									"    msg.error = \"status response failed\"",
									"}",
									"",
									"var Url_report = pm.environment.get(\"url_report\");",
									"pm.sendRequest({",
									"    url: Url_report,",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify(msg)",
									"    }",
									"}, function (err, res) {",
									"    pm.environment.set(\"authorization\", \"Bearer \" + res.json().token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{server}}:{{port}}/{{version}}/users/checkemail.json?email=123123",
							"protocol": "https",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"{{version}}",
								"users",
								"checkemail.json"
							],
							"query": [
								{
									"key": "email",
									"value": "123123"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "529b78ab-3047-46e7-82f3-d35c9814abd5",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "87dc3f09-d3e3-4bad-ae61-3e46373e93bc",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}